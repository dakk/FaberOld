Index: src/preferences/network/LocationSettings.h
===================================================================
--- src/preferences/network/LocationSettings.h	(revisione 0)
+++ src/preferences/network/LocationSettings.h	(revisione 0)
@@ -0,0 +1,43 @@
+/*
+ * Copyright 2008-2009 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *		Casalinuovo Dario, barrett666@gmail.com
+ */
+
+#ifndef NETWORKS_SETTINGS_H
+#define NETWORKS_SETTINGS_H
+
+#include <ObjectList.h>
+#include <String.h>
+
+#include "Settings.h"
+
+class BPath;
+
+class LocationSettings : public Settings {
+public:
+				LocationSettings(BPath settingsPath);
+	virtual		~LocationSettings();
+
+	status_t	LoadSettings();
+	status_t	SaveSettings();
+
+	status_t	DeleteLocationDirectory(BPath dirPath);
+	
+	status_t	MoveNetworkFile(BPath currentPath, BPath destinationPath);
+	
+	status_t	AddNetwork(const char* name);
+
+	void		_FindEthernetDevices(BObjectList<BString> *devicesList);
+	status_t 	AutoConfigureAllSettings();
+	bool 		IfConfigured();
+
+private:
+	BPath		fSettingsPath;
+	bool 		fConfigured;
+
+	BObjectList<BString> 	fInterfaces;
+};
+#endif /* NETWORKS_SETTINGS_H */

Proprietà modificate su: src/preferences/network/LocationSettings.h
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/TextEntryWindow.cpp
===================================================================
--- src/preferences/network/TextEntryWindow.cpp	(revisione 0)
+++ src/preferences/network/TextEntryWindow.cpp	(revisione 0)
@@ -0,0 +1,135 @@
+/*
+ * Copyright 2009 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ * 		Dario "Barrett" Casalinuovo, Barrett666@gmail.com
+ */
+
+#include <Application.h>
+#include <Button.h>
+#include <GridView.h>
+#include <GroupLayout.h>
+#include <GroupView.h>
+#include <LayoutItem.h>
+#include <Message.h>
+#include <String.h>
+#include <TextControl.h>
+#include <View.h>
+
+#include <stdio.h>
+
+#include "TextEntryWindow.h"
+
+const uint32 kMsgSetNetworkName = 'nnam';
+static const int kSemTimeOut = 50000;
+
+TextEntryWindow::TextEntryWindow(const char* textShow)
+	: BWindow(BRect(50, 50, 400, 300), "Warning", B_TITLED_WINDOW,
+		B_NOT_RESIZABLE | B_ASYNCHRONOUS_CONTROLS |
+			B_NOT_ZOOMABLE | B_AUTO_UPDATE_SIZE_LIMITS)
+{
+	BGroupLayout* rootLayout = new BGroupLayout(B_VERTICAL);
+	SetLayout(rootLayout);
+	BGroupView* firstGroup = new BGroupView(B_VERTICAL);
+
+	firstGroup->SetViewColor(ui_color(B_PANEL_BACKGROUND_COLOR));
+	
+	fNetworkNameControl = new BTextControl(
+		textShow, "", NULL);
+
+	fConfirmButton = new BButton("OK!",
+		new BMessage(kMsgSetNetworkName));
+
+	fConfirmButton->SetTarget(this);
+
+	firstGroup->GroupLayout()->AddView(fNetworkNameControl);
+
+	firstGroup->GroupLayout()->AddView(fConfirmButton);
+
+	rootLayout->AddView(firstGroup);
+}
+
+
+TextEntryWindow::~TextEntryWindow()
+{
+}
+
+
+void
+TextEntryWindow::Quit()
+{
+	BWindow::Quit();
+}
+
+
+const char*
+TextEntryWindow::Go() // copied from BAlert::Go
+{
+	fTextSem = create_sem(0, "TextEntrySem");
+	if (fTextSem < B_OK) {
+		Quit();
+		return NULL;
+	}
+
+	BWindow* window =
+		dynamic_cast<BWindow*>(BLooper::LooperForThread(find_thread(NULL)));
+
+	Show();
+
+	if (window) {
+		status_t err;
+		for (;;) {
+			do {
+				err = acquire_sem_etc(fTextSem, 1, B_RELATIVE_TIMEOUT,
+									  kSemTimeOut);
+			} while (err == B_INTERRUPTED);
+
+			if (err == B_BAD_SEM_ID) {
+				break;
+			}
+			window->UpdateIfNeeded();
+		}
+	} else {
+		while (acquire_sem(fTextSem) == B_INTERRUPTED) {
+		}
+	}
+
+	BString string = fString;
+
+	if (Lock())
+		Quit();
+
+	return string.String();
+}
+
+
+bool
+TextEntryWindow::QuitRequested()
+{
+	be_app->PostMessage(B_QUIT_REQUESTED);
+	return true;
+}
+
+
+void
+TextEntryWindow::MessageReceived(BMessage* message)
+{
+	switch (message->what) {
+
+		case kMsgSetNetworkName:
+		{
+			if (fTextSem < B_OK) {
+				PostMessage(B_QUIT_REQUESTED);
+			} else {
+				fString = BString(fNetworkNameControl->Text());
+				delete_sem(fTextSem);	
+			}
+		}
+		break;
+
+	default:
+		BWindow::MessageReceived(message);
+	}
+
+}

Proprietà modificate su: src/preferences/network/TextEntryWindow.cpp
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/EthernetSettings.cpp
===================================================================
--- src/preferences/network/EthernetSettings.cpp	(revisione 0)
+++ src/preferences/network/EthernetSettings.cpp	(revisione 0)
@@ -0,0 +1,378 @@
+/*
+ * Copyright 2008 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *		Casalinuovo Dario, barrett666@gmail.com
+ */
+#include "EthernetSettings.h"
+
+#include <AutoDeleter.h>
+#include <Alert.h>
+//#include <Catalog.h>
+#include <Directory.h>
+#include <File.h>
+#include <FindDirectory.h>
+#include <fs_interface.h>
+//#include <Locale.h>
+#include <Message.h>
+#include <Messenger.h>
+#include <Path.h>
+#include <SupportDefs.h>
+
+// network headers
+#include <arpa/inet.h>
+#include <net/if.h>
+#include <net/if_dl.h>
+#include <net/if_media.h>
+#include <net/if_types.h>
+#include <netinet/in.h>
+#include <stdio.h>
+#include <resolv.h>
+#include <sys/socket.h>
+#include <sys/sockio.h>
+
+#include <errno.h>
+#include <NetServer.h>
+#include "AutoDeleter.h"
+
+#undef TR_CONTEXT
+#define TR_CONTEXT "EthernetSettings"
+
+#define PFLT_IPV4_AUTOCONF "ipv4_autoconf"
+#define PFLT_CONFIGURED "configured"
+
+EthernetSettings::EthernetSettings(BPath settingsPath, const char* name)
+	: Settings(settingsPath)
+{
+	fAuto = true;
+	fSocket = socket(AF_INET, SOCK_DGRAM, 0);
+	fName = name;
+	ReadConfiguration();
+}
+
+
+EthernetSettings::~EthernetSettings() 
+{
+	close(fSocket);
+}
+
+
+status_t
+EthernetSettings::LoadSettings()
+{
+	status_t ret;
+
+	ret = ReadSetting(PFLT_IPV4_AUTOCONF , &fAuto);
+	if (ret < B_OK)
+		return ret;
+	
+	ret = ReadSetting(PFLT_CONFIGURED, &fConfigured);
+	if (ret < B_OK)
+		return ret;
+
+	ReadConfiguration();
+
+	return B_OK;
+}
+
+
+status_t
+EthernetSettings::ApplySettings()
+{
+
+	return B_OK;
+}
+
+
+status_t 
+EthernetSettings::SaveSettings()
+{
+	_SaveAdapterConfiguration();
+	_SaveDNSConfiguration();
+
+	status_t ret;
+
+		if (fConfigured == true) {
+			ret = ReplaceSetting(PFLT_IPV4_AUTOCONF , fAuto);
+			if (ret < B_OK)
+				return ret;
+		} else {
+			ret = WriteSetting(PFLT_IPV4_AUTOCONF , fAuto);
+			if (ret < B_OK)
+				return ret;
+
+			ret = WriteSetting(PFLT_CONFIGURED, true);
+			if (ret < B_OK)
+				return ret;
+		}		
+	return FlattenSettings();
+}
+
+
+status_t
+EthernetSettings::TriggerAutoConfig()
+{
+	BMessenger networkServer(kNetServerSignature);
+	if (!networkServer.IsValid()) {
+	/*	(new BAlert("error", TR("The net_server needs to run for the auto "
+			"configuration!"), TR("OK")))->Go();*/
+		return B_ERROR;
+	}
+
+	BMessage message(kMsgConfigureInterface);
+	message.AddString("device", GetName());
+	BMessage address;
+	address.AddString("family", "inet");
+	address.AddBool("auto_config", true);
+	message.AddMessage("address", &address);
+
+	BMessage reply;
+	status_t status = networkServer.SendMessage(&message, &reply);
+	if (status != B_OK) {
+/*		BString errorMessage(TR("Sending auto-config message failed: "));
+		errorMessage << strerror(status);
+		(new BAlert("error", errorMessage.String(), TR("OK")))->Go();*/
+		return status;
+	} else if (reply.FindInt32("status", &status) == B_OK
+			&& status != B_OK) {
+/*		BString errorMessage(TR("Auto-configuring failed: "));
+		errorMessage << strerror(status);
+		(new BAlert("error", errorMessage.String(), "OK"))->Go();*/
+		return status;
+	}
+
+	return B_OK;
+}
+
+
+void
+EthernetSettings::_SaveAdapterConfiguration()
+{
+	BPath path;
+	status_t status = _GetPath("interfaces", path);
+	if (status < B_OK)
+		return;
+
+	FILE* fp = NULL;
+
+		if (!fAuto)
+			return;
+
+		if (fp == NULL) {
+			fp = fopen(path.Path(), "w");
+			if (fp == NULL) {
+				fprintf(stderr, "failed to open file %s to write "
+					"configuration: %s\n", path.Path(), strerror(errno));
+				return;
+			}
+		}
+
+		fprintf(fp, "interface %s {\n\t\taddress {\n",GetName());
+		fprintf(fp, "\t\t\tfamily\tinet\n");
+		fprintf(fp, "\t\t\taddress\t%s\n", GetIP());
+		fprintf(fp, "\t\t\tgateway\t%s\n", GetGateway());
+		fprintf(fp, "\t\t\tmask\t%s\n", GetNetmask());
+		fprintf(fp, "\t\t}\n}\n\n");
+
+	if (fp) {
+		printf("%s saved.\n", path.Path());
+		fclose(fp);
+	} else {
+		// all configuration is DHCP, so delete interfaces file.
+		remove(path.Path());
+	}
+}
+
+
+status_t
+EthernetSettings::_GetPath(const char* name, BPath& path)
+{
+	if (find_directory(B_COMMON_SETTINGS_DIRECTORY, &path, true) != B_OK)
+		return B_ERROR;
+
+	path.Append("network");
+	create_directory(path.Path(), 0755);
+
+	if (name != NULL)
+		path.Append(name);
+
+	return B_OK;
+}
+
+
+void
+EthernetSettings::_SaveDNSConfiguration()
+{
+	BPath path;
+	if (find_directory(B_COMMON_SETTINGS_DIRECTORY, &path) != B_OK)
+		return;
+
+	path.Append("network/resolv.conf");
+	
+	BFile file(path.Path(),
+		B_CREATE_FILE | B_ERASE_FILE | B_WRITE_ONLY);
+	if (file.InitCheck() < B_OK) {
+		fprintf(stderr, "failed to open %s for writing: %s\n",
+			path.Path(), strerror(file.InitCheck()));
+		return;
+	}
+
+	BString content("# Generated by Network Preflet\n");
+		for (int j = 0; j < fNameServers.CountItems(); j++) {
+			if (fNameServers.ItemAt(j)->Length() > 0) {
+				content << "nameserver\t"
+					<< fNameServers.ItemAt(j)->String()
+					<< "\n";
+			}
+		}
+		if (strlen(GetDomain()) > 0) {
+			content << "domain\t"
+				<< GetDomain()
+				<< "\n";
+		}
+		
+	file.Write(content.String(), content.Length());
+}
+
+
+void
+EthernetSettings::ReadConfiguration()
+{
+	ifreq request;
+	if (!_PrepareRequest(request))
+		return;
+
+	BString text = "dummy";
+	char address[32];
+	sockaddr_in* inetAddress = NULL;
+
+	// Obtain IP.
+	if (ioctl(fSocket, SIOCGIFADDR, &request, sizeof(request)) < 0)
+		return;
+
+	inetAddress = (sockaddr_in*)&request.ifr_addr;
+	if (inet_ntop(AF_INET, &inetAddress->sin_addr, address,
+			sizeof(address)) == NULL) {
+		return;
+	}
+
+	fIP = address;
+
+	// Obtain netmask.
+	if (ioctl(fSocket, SIOCGIFNETMASK, &request, sizeof(request)) < 0)
+		return;
+
+	inetAddress = (sockaddr_in*)&request.ifr_mask;
+	if (inet_ntop(AF_INET, &inetAddress->sin_addr, address,
+			sizeof(address)) == NULL) {
+		return;
+	}
+
+	fSubnetMask = address;
+
+	// Obtain gateway
+	ifconf config;
+	config.ifc_len = sizeof(config.ifc_value);
+	if (ioctl(fSocket, SIOCGRTSIZE, &config, sizeof(struct ifconf)) < 0)
+		return;
+
+	uint32 size = (uint32)config.ifc_value;
+	if (size == 0)
+		return;
+
+	void* buffer = malloc(size);
+	if (buffer == NULL)
+		return;
+
+	MemoryDeleter bufferDeleter(buffer);
+	config.ifc_len = size;
+	config.ifc_buf = buffer;
+
+	if (ioctl(fSocket, SIOCGRTTABLE, &config, sizeof(struct ifconf)) < 0)
+		return;
+
+	ifreq* interface = (ifreq*)buffer;
+	ifreq* end = (ifreq*)((uint8*)buffer + size);
+
+	while (interface < end) {
+		route_entry& route = interface->ifr_route;
+
+		if ((route.flags & RTF_GATEWAY) != 0) {
+			inetAddress = (sockaddr_in*)route.gateway;
+			fGateway = inet_ntoa(inetAddress->sin_addr);
+		}
+
+		int32 addressSize = 0;
+		if (route.destination != NULL)
+			addressSize += route.destination->sa_len;
+		if (route.mask != NULL)
+			addressSize += route.mask->sa_len;
+		if (route.gateway != NULL)
+			addressSize += route.gateway->sa_len;
+
+		interface = (ifreq *)((addr_t)interface + IF_NAMESIZE
+			+ sizeof(route_entry) + addressSize);
+	}
+
+	uint32 flags = 0;
+	if (ioctl(fSocket, SIOCGIFFLAGS, &request, sizeof(struct ifreq)) == 0)
+		flags = request.ifr_flags;
+
+	fAuto = (flags & IFF_AUTO_CONFIGURED) != 0;
+
+	// read resolv.conf for the dns.
+	fNameServers.MakeEmpty();
+
+	res_init();
+	res_state state = __res_state();
+
+	if (state != NULL) {
+		for (int i = 0; i < state->nscount; i++) {
+			fNameServers.AddItem(
+				new BString(inet_ntoa(state->nsaddr_list[i].sin_addr)));
+		}
+		fDomain = state->dnsrch[0];
+	}
+}
+
+
+status_t
+EthernetSettings :: AutoConfigureAllSettings()
+{
+
+	SetAutoConfigure(true);
+
+	return B_OK;	
+}
+
+
+bool
+EthernetSettings :: IfConfigured()
+{
+	if (ReadSetting(PFLT_CONFIGURED, &fConfigured) < B_OK)
+		return false;
+
+	if (fConfigured == true) {
+		return true;
+	} else if (fConfigured == false) {
+		return false;	
+	}
+	return false;
+}
+
+
+bool
+EthernetSettings::_PrepareRequest(struct ifreq& request)
+{
+	// This function is used for talking direct to the stack. 
+	// It´s used by _ShowConfiguration.
+
+	const char* name = fName.String();
+
+	if (strlen(name) > IF_NAMESIZE)
+		return false;
+
+	strcpy(request.ifr_name, name);
+	return true;
+}

Proprietà modificate su: src/preferences/network/EthernetSettings.cpp
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/NetworkApp.h
===================================================================
--- src/preferences/network/NetworkApp.h	(revisione 36388)
+++ src/preferences/network/NetworkApp.h	(copia locale)
@@ -15,20 +15,17 @@
 #include <stdlib.h>
 #include <unistd.h>
 #include <Application.h>
-#include <Catalog.h>
-#include <Locale.h>
 
 #include "NetworkWindow.h"
 
 class NetworkApp : public BApplication {
-	public:
-		NetworkApp();
-		virtual ~NetworkApp();
-		
-		virtual void ReadyToRun();
-	private:
-		NetworkWindow	*fEthWindow;
-		BCatalog	fCatalog;
+public:
+					NetworkApp();
+	virtual			~NetworkApp();
+
+	virtual void 	ReadyToRun();
+private:
+	NetworkWindow	*fPrefletWindow;
 };
 
 
Index: src/preferences/network/EthernetSettingsView.h
===================================================================
--- src/preferences/network/EthernetSettingsView.h	(revisione 36388)
+++ src/preferences/network/EthernetSettingsView.h	(copia locale)
@@ -1,88 +1,73 @@
 /*
- * Copyright 2004-2009 Haiku Inc. All rights reserved.
+ * Copyright 2004-2007 Haiku Inc. All rights reserved.
  * Distributed under the terms of the MIT License.
  *
  * Author:
  *		Andre Alves Garzia, andre@andregarzia.com
  *		Axel Dörfler
  *		Hugo Santos
- *		Vegard Wærp
+ *		Dario Casalinuovo, barrett666@gmail.com
  */
 #ifndef ETHERNET_SETTINGS_VIEW_H
 #define ETHERNET_SETTINGS_VIEW_H
 
-
 #include <ObjectList.h>
 #include <View.h>
 
 #include <posix/regex.h>
 
+#include "EthernetSettings.h"
+#include "NetworkTypeView.h"
 
 class BButton;
 class BMenuField;
 class BPath;
-class BTextControl;
 class BStringView;
-class Settings;
+class BTextControl;
 
-
-class EthernetSettingsView : public BView {
+class EthernetSettingsView : public NetworkTypeView {
 public:
-								EthernetSettingsView();
-		virtual					~EthernetSettingsView();
+								EthernetSettingsView(BPath path, 
+									const char* adapterName);
 
-		virtual	void			MessageReceived(BMessage* message);
-		virtual	void			AttachedToWindow();
-		virtual	void			DetachedFromWindow();
+	virtual						~EthernetSettingsView();
 
-				void			SaveProfile(BString profileName);
-				void			LoadProfile(BString profileName);
+	virtual	void				MessageReceived(BMessage* message);
+	virtual	void				AttachedToWindow();
+	virtual	void				DetachedFromWindow();
 
-private:
-				void			_GatherInterfaces();
-				bool			_PrepareRequest(struct ifreq& request,
-									const char* name);
-				void 			_ShowConfiguration(Settings* settings);
-				void			_EnableTextControls(bool enable);
-				void			_SaveConfiguration();
-				void			_SaveDNSConfiguration();
-				void			_SaveAdaptersConfiguration();
-				void			_ApplyControlsToConfiguration();
-				status_t		_GetPath(const char* name, BPath& path);
-				status_t		_TriggerAutoConfig(const char* device);
+			void				SaveProfile(BString profileName);
+			void				LoadProfile(BString profileName);
+			void				DeleteNetworkAndSettings();
+			
+			void				RevertAll();
 
-				bool			_ValidateControl(BTextControl* control);
 private:
+			void	 			_ShowConfiguration();
+			void				_EnableTextControls(bool enable);
+			void				_SaveConfiguration();
+			void				_ApplyControlsToConfiguration();
+			bool				_ValidateControl(BTextControl* control);
+		
+			BButton*			fApplyButton;
+			BButton*			fRevertButton;
 
-				BButton*		fApplyButton;
-				BButton*		fRevertButton;
-					// TODO: buttons should be moved to window instead
+			BMenuField*			fTypeMenuField;
+			BTextControl*		fIPTextControl;
+			BTextControl*		fNetMaskTextControl;
+			BTextControl*		fGatewayTextControl;
 
-				BMenuField*		fDeviceMenuField;
-				BMenuField*		fTypeMenuField;
-				BTextControl*	fIPTextControl;
-				BTextControl*	fNetMaskTextControl;
-				BTextControl*	fGatewayTextControl;
+			BTextControl*		fPrimaryDNSTextControl;
+			BTextControl*		fSecondaryDNSTextControl;
+			
+			BTextControl*		fDomainTextControl;
 
-				BTextControl*	fPrimaryDNSTextControl;
-				BTextControl*	fSecondaryDNSTextControl;
-				BTextControl*	fDomainTextControl;
+			BStringView*		fErrorMessage;
 
-				BStringView*	fErrorMessage;
+			EthernetSettings*	fCurrentSettings;
 
-					// TODO: DNS settings do not belong here, do they?
-				BObjectList<BString> fInterfaces;
-					// TODO: the view should not know about the interfaces,
-					// it should only display the given interface, move
-					// one level up.
-				BObjectList<Settings> fSettings;
-					// TODO: the view should not know about a list
-					// of settings, instead it should be configured
-					// to a specific setting from the code one level up
-				Settings*		fCurrentSettings;
-
-				int32			fStatus;
-				int				fSocket;
+			int32				fStatus;
+			int					fSocket;
 };
 
 #endif /* ETHERNET_SETTINGS_VIEW_H */
Index: src/preferences/network/Settings.cpp
===================================================================
--- src/preferences/network/Settings.cpp	(revisione 36388)
+++ src/preferences/network/Settings.cpp	(copia locale)
@@ -1,165 +1,152 @@
 /*
- * Copyright 2004-2009 Haiku Inc. All rights reserved.
+ * Copyright 2008 Haiku Inc. All rights reserved.
  * Distributed under the terms of the MIT License.
  *
- * Authors:
- *		Andre Alves Garzia, andre@andregarzia.com
- *		Axel Dörfler, axeld@pinc-software.de.
- *		Vegard Wærp, vegarwa@online.no
+ * Author:
+ *		Casalinuovo Dario, barrett666@gmail.com
  */
-
-
 #include "Settings.h"
 
-#include <arpa/inet.h>
-#include <errno.h>
-#include <net/if.h>
-#include <netinet/in.h>
-#include <resolv.h>
 #include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <sys/socket.h>
-#include <sys/sockio.h>
-#include <unistd.h>
 
-#include <File.h>
-#include <Path.h>
-#include <String.h>
+#include <Entry.h>
+#include <new>
 
-#include <AutoDeleter.h>
+const uint32 kMsgSettings = 'stng';
 
-
-Settings::Settings(const char* name)
-	:
-	fAuto(true),
-	fNameServers(5, true)
+Settings::Settings(BPath path)
+	: BMessage(kMsgSettings), fSettingsPath(path)
 {
-	fSocket = socket(AF_INET, SOCK_DGRAM, 0);
-	fName = name;
-
-	ReadConfiguration();
+		fSettingsFile = new(std :: nothrow) BFile(path.Path(),
+		B_READ_WRITE | B_CREATE_FILE);
 }
 
 
 Settings::~Settings()
 {
-	close(fSocket);
+
 }
 
 
-bool
-Settings::_PrepareRequest(struct ifreq& request)
+status_t
+Settings::OpenSettings()
 {
-	// This function is used for talking direct to the stack.
-	// It´s used by _ShowConfiguration.
+	status_t ret = fSettingsFile->InitCheck();
 
-	const char* name = fName.String();
+	if (ret < B_OK) {
+		printf("Settings: initchek error %s\n", strerror(ret));
+		return ret;	
+	}
 
-	if (strlen(name) > IF_NAMESIZE)
-		return false;
+	ret = Unflatten(fSettingsFile);
+	
+	if (ret < B_OK) {
+		printf("Settings: unflatten error %s\n", strerror(ret));
+		return ret;
+	}
+	
+	return B_OK;	
+}
 
-	strcpy(request.ifr_name, name);
-	return true;
+
+status_t
+Settings::ReadSetting(const char* name, BString* string)
+{
+	const char* setting;
+	
+	status_t ret = FindString(name, &setting);
+	
+	if (ret < B_OK) {
+		return ret;
+	} else {
+		string->SetTo(setting);
+		return ret;
+	}	
 }
 
 
-void
-Settings::ReadConfiguration()
+status_t
+Settings::ReadSetting(const char* name, int32* setting)
 {
-	ifreq request;
-	if (!_PrepareRequest(request))
-		return;
+	return FindInt32(name, setting);
+}
 
-	BString text = "dummy";
-	char address[32];
-	sockaddr_in* inetAddress = NULL;
 
-	// Obtain IP.
-	if (ioctl(fSocket, SIOCGIFADDR, &request, sizeof(request)) < 0)
-		return;
+status_t
+Settings::ReadSetting(const char* name, bool* setting)
+{
+	return FindBool(name, setting);
+}
 
-	inetAddress = (sockaddr_in*)&request.ifr_addr;
-	if (inet_ntop(AF_INET, &inetAddress->sin_addr, address,
-			sizeof(address)) == NULL) {
-		return;
-	}
 
-	fIP = address;
+status_t
+Settings::WriteSetting(const char* name, const char* string)
+{
+	return AddString(name, string);
+}
 
-	// Obtain netmask.
-	if (ioctl(fSocket, SIOCGIFNETMASK, &request, sizeof(request)) < 0)
-		return;
 
-	inetAddress = (sockaddr_in*)&request.ifr_mask;
-	if (inet_ntop(AF_INET, &inetAddress->sin_addr, address,
-			sizeof(address)) == NULL) {
-		return;
-	}
+status_t
+Settings::WriteSetting(const char* name, int32 setting)
+{
+	return AddInt32(name, setting);
+}
 
-	fNetmask = address;
 
-	// Obtain gateway
-	ifconf config;
-	config.ifc_len = sizeof(config.ifc_value);
-	if (ioctl(fSocket, SIOCGRTSIZE, &config, sizeof(struct ifconf)) < 0)
-		return;
+status_t
+Settings::WriteSetting(const char* name, bool setting)
+{
+	return AddBool(name, setting);
+}
 
-	uint32 size = (uint32)config.ifc_value;
-	if (size == 0)
-		return;
 
-	void* buffer = malloc(size);
-	if (buffer == NULL)
-		return;
+status_t
+Settings::ReplaceSetting(const char* name, const char* string)
+{
+	return ReplaceString(name, 0, string);
+}
 
-	MemoryDeleter bufferDeleter(buffer);
-	config.ifc_len = size;
-	config.ifc_buf = buffer;
 
-	if (ioctl(fSocket, SIOCGRTTABLE, &config, sizeof(struct ifconf)) < 0)
-		return;
+status_t
+Settings::ReplaceSetting(const char* name, int32 setting)
+{
+	return ReplaceInt32(name, 0, setting);
+}
 
-	ifreq* interface = (ifreq*)buffer;
-	ifreq* end = (ifreq*)((uint8*)buffer + size);
 
-	while (interface < end) {
-		route_entry& route = interface->ifr_route;
+status_t
+Settings::ReplaceSetting(const char* name, bool setting)
+{
+	return ReplaceBool(name, 0, setting);
+}
 
-		if ((route.flags & RTF_GATEWAY) != 0) {
-			inetAddress = (sockaddr_in*)route.gateway;
-			fGateway = inet_ntoa(inetAddress->sin_addr);
-		}
 
-		int32 addressSize = 0;
-		if (route.destination != NULL)
-			addressSize += route.destination->sa_len;
-		if (route.mask != NULL)
-			addressSize += route.mask->sa_len;
-		if (route.gateway != NULL)
-			addressSize += route.gateway->sa_len;
+status_t
+Settings::RemoveSetting(const char* name)
+{
+	return RemoveData(name);
+}
 
-		interface = (ifreq *)((addr_t)interface + IF_NAMESIZE
-			+ sizeof(route_entry) + addressSize);
-	}
 
-	uint32 flags = 0;
-	if (ioctl(fSocket, SIOCGIFFLAGS, &request, sizeof(struct ifreq)) == 0)
-		flags = request.ifr_flags;
+status_t
+Settings::DeleteSettings()
+{
+	delete fSettingsFile;
+	BEntry* entry = new BEntry(fSettingsPath.Path(), false);
+	printf("Settings::DeleteSettings() the entry is %s\n", fSettingsPath.Path());
 
-	fAuto = (flags & IFF_AUTO_CONFIGURED) != 0;
+	status_t ret = entry->Remove();
+	if (ret < B_OK)
+		return ret;
 
-	// read resolv.conf for the dns.
-	fNameServers.MakeEmpty();
+	delete entry;
+	return B_OK;
+}
 
-	res_init();
-	res_state state = __res_state();
 
-	if (state != NULL) {
-		for (int i = 0; i < state->nscount; i++) {
-			fNameServers.AddItem(
-				new BString(inet_ntoa(state->nsaddr_list[i].sin_addr)));
-		}
-		fDomain = state->dnsrch[0];
-	}
+status_t
+Settings::FlattenSettings()
+{
+	fSettingsFile->Seek(0, SEEK_SET);
+	return Flatten(fSettingsFile);
 }
Index: src/preferences/network/NetworksMenuView.h
===================================================================
--- src/preferences/network/NetworksMenuView.h	(revisione 0)
+++ src/preferences/network/NetworksMenuView.h	(revisione 0)
@@ -0,0 +1,74 @@
+/*
+ * Copyright 2008 - 2009 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *		Casalinuovo Dario, barrett666@gmail.com
+ */
+
+#ifndef ETHERNET_NETWORK_VIEW_H
+#define ETHERNET_NETWORK_VIEW_H
+
+#include "NetworkTypeView.h"
+
+#include <ColumnListView.h>
+#include <ObjectList.h>
+#include <String.h>
+
+class BBox;
+class BCheckBox;
+class BStringView;
+
+//
+class NRow : public BRow {
+public:
+							NRow(float height);
+
+		void				SetAssociatedView(NetworkTypeView*);
+		NetworkTypeView*	GetAssociatedView();
+
+		void				SetType(const char*);
+		const char*			GetType();
+
+private:
+		NetworkTypeView*	fAssociatedView;
+		const char* 		fType;
+};
+
+
+class NetworksMenuView : public BView {
+public:
+							NetworksMenuView();
+virtual						~NetworksMenuView();
+
+virtual	void				MessageReceived(BMessage* message);
+virtual	void				AttachedToWindow();
+virtual	void				DetachedFromWindow();
+
+		status_t			AddEthernetAdapter(BString name, BPath path);
+		status_t			AddPPPoENetwork(BString name, BPath path);
+//		status_t			AddVPN(Bstring name, BPath path);
+		status_t			MoveNetwork(NetworkTypeView* network);
+		
+		NetworkTypeView*	GetSelectedNetwork();
+
+		status_t			SelectedNetworkMoved();
+
+		status_t	 		RemoveNetwork();
+		status_t			DeleteAllNetworks();
+		
+		void				RevertAll();
+private:
+		status_t			_AddRow(const char* name);
+		void				_HideAllChilds();
+
+		BBox* 				fNetworksBBox;
+		BBox* 				fNetworkPreferencesBBox;
+		BCheckBox* 			fCustomizePreferencesCheckBox;
+		BStringView*		fNetworkName;
+		BStringView* 		fNetworkStatus;
+		BColumnListView*	fNetworksList;
+		BGroupView* 		fNtpGroup;
+};
+
+#endif

Proprietà modificate su: src/preferences/network/NetworksMenuView.h
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/TextEntryWindow.h
===================================================================
--- src/preferences/network/TextEntryWindow.h	(revisione 0)
+++ src/preferences/network/TextEntryWindow.h	(revisione 0)
@@ -0,0 +1,37 @@
+/*
+ * Copyright 2009 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ * 		Dario "Barrett" Casalinuovo, Barrett666@gmail.com
+ */
+#ifndef NETWORK_WINDOW_H
+#define NETWORK_WINDOW_H
+
+#include <Window.h>
+
+class BButton;
+class BString;
+class BTextControl;
+
+class NetworkView;
+
+class TextEntryWindow : public BWindow {
+public:
+					TextEntryWindow(const char* textShow);
+	virtual			~TextEntryWindow();
+	virtual void	MessageReceived(BMessage* mesage);
+			bool	QuitRequested();
+	
+			void	Quit();
+
+	const char*		Go();
+
+private:
+	BTextControl* 	fNetworkNameControl;
+	BString			fString;
+	BButton* 		fConfirmButton;
+	sem_id			fTextSem;
+};
+
+#endif	/* NETWORK_WINDOW_H */

Proprietà modificate su: src/preferences/network/TextEntryWindow.h
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/LocationView.cpp
===================================================================
--- src/preferences/network/LocationView.cpp	(revisione 0)
+++ src/preferences/network/LocationView.cpp	(revisione 0)
@@ -0,0 +1,425 @@
+/*
+ * Copyright 2008-2010 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *      Dario "Barrett" Casalinuovo - barrett666@gmail.com
+ *      
+ *      
+ */
+#include "LocationView.h"
+
+#include <stdio.h>
+
+#include <Alert.h>
+#include <Button.h>
+#include <FindDirectory.h>
+#include <GridView.h>
+#include <GroupView.h>
+#include <LayoutItem.h>
+#include <Menu.h>
+#include <MenuField.h>
+#include <MenuItem.h>
+#include <Path.h>
+#include <PopUpMenu.h>
+#include <String.h>
+#include <View.h>
+
+#include "LocationSettings.h"
+#include "NetworksMenuView.h"
+#include "NetworkTypeView.h"
+#include "TextEntryWindow.h"
+
+#include <new>
+
+const uint32 kMsgPPPOE = 'ppoe';
+const uint32 kMsgVPN = 'vpnc';
+const uint32 kMsgMoveToLocation = 'mvtl';
+const uint32 kMsgRemoveNetwork = 'rmnt';
+
+LocationView::LocationView(const char* locationName,
+	BObjectList<LocationView> &list)
+	: BView("LocationView", 0, NULL)
+{
+	fIfGlobal = false;
+
+	status_t err = find_directory(B_COMMON_SETTINGS_DIRECTORY, 
+		&fLocationPath, true);
+
+	err = find_directory(B_COMMON_SETTINGS_DIRECTORY,
+		&fSettingsPath, true);
+
+	fSettingsPath.Append("network/profiles/");
+	fSettingsPath.Append(locationName);
+	fSettingsPath.Append("location");
+
+	fLocationPath.Append("network/profiles");
+	fLocationPath.Append(locationName);
+
+	fLocationSettings = new LocationSettings(fSettingsPath);
+
+	SetViewColor(ui_color(B_PANEL_BACKGROUND_COLOR));
+
+	BGroupLayout* rootLayout = new BGroupLayout(B_VERTICAL);
+
+	SetLayout(rootLayout);
+
+	BGroupView* firstGroup = new BGroupView(B_VERTICAL);
+
+	fIspMenu = new BMenu("My ISP");
+
+	fPreferredISP = new BMenuField("Connect On Demand :", fIspMenu);
+
+	firstGroup->GroupLayout()->AddView(fPreferredISP);
+
+	BGroupView* bboxGroup = new BGroupView(B_HORIZONTAL);
+
+	//
+
+	fNetworksMenuView = new NetworksMenuView();
+
+	bboxGroup->GroupLayout()->AddView(fNetworksMenuView);
+
+	// under the Networks Menu 
+
+	BGroupView* useroptGroup = new BGroupView(B_HORIZONTAL);
+
+	fNetworkMenu = new BPopUpMenu("Network");
+	fNetworkMenu->SetLabelFromMarked(false);
+
+	fNetworkMenuField = new BMenuField("Add :", fNetworkMenu);  
+
+	BMenuItem* fPPPoEMenu = new BMenuItem("PPPoE",
+		new BMessage(kMsgPPPOE));
+
+	fNetworkMenu->AddItem(fPPPoEMenu);
+
+	BMenuItem* fVPNMenu = new BMenuItem("VPN", new BMessage(kMsgVPN));
+
+	fNetworkMenu->AddItem(fVPNMenu);
+
+	useroptGroup->GroupLayout()->AddView(fNetworkMenuField);
+
+	fMoveToMenu = new BPopUpMenu("Select a Location");
+	fMoveToMenu->SetLabelFromMarked(false);
+
+	fMoveToMenuField = new BMenuField("Move To :", fMoveToMenu);
+
+	useroptGroup->GroupLayout()->AddView(fMoveToMenuField);
+
+	fRemoveButton = new BButton("Remove",
+		new BMessage(kMsgRemoveNetwork));
+
+	useroptGroup->GroupLayout()->AddView(fRemoveButton);
+	
+	_PopulateMoveToMenu(list);
+
+	rootLayout->AddView(firstGroup);
+	rootLayout->AddView(bboxGroup);
+	rootLayout->AddView(useroptGroup);
+}
+
+
+// global location constructor
+LocationView::LocationView()
+	: BView("GlobalLocation", 0, NULL)
+{
+	status_t err = find_directory(B_COMMON_SETTINGS_DIRECTORY, 
+		&fLocationPath, true);
+
+	err = find_directory(B_COMMON_SETTINGS_DIRECTORY,
+		&fSettingsPath, true);
+
+	fSettingsPath.Append("network/profiles/global/location");
+	fLocationPath.Append("network/profiles/global");
+	
+	fIfGlobal = true;
+
+	fLocationSettings = new LocationSettings(fSettingsPath);
+
+	SetViewColor(ui_color(B_PANEL_BACKGROUND_COLOR));
+
+	BGroupLayout* rootLayout = new BGroupLayout(B_VERTICAL);
+
+	SetLayout(rootLayout);
+
+	BGroupView* firstGroup = new BGroupView(B_VERTICAL);
+
+	fIspMenu = new BMenu("My ISP");
+
+	fPreferredISP = new BMenuField("Connect On Demand :", fIspMenu);
+
+	firstGroup->GroupLayout()->AddView(fPreferredISP);
+
+	BGroupView* bboxGroup = new BGroupView(B_HORIZONTAL);
+
+	//
+
+	fNetworksMenuView = new NetworksMenuView();
+
+	bboxGroup->GroupLayout()->AddView(fNetworksMenuView);
+
+	// under the Networks Menu 
+
+	BGroupView* useroptGroup = new BGroupView(B_HORIZONTAL);
+
+	fNetworkMenu = new BPopUpMenu("Network");
+	fNetworkMenu->SetLabelFromMarked(false);
+
+	fNetworkMenuField = new BMenuField("Add :", fNetworkMenu);  
+
+	BMenuItem* fPPPoEMenu = new BMenuItem("PPPoE",
+		new BMessage(kMsgPPPOE));
+
+	fNetworkMenu->AddItem(fPPPoEMenu);
+
+	/* BMenuItem* fVPNMenu = new BMenuItem("VPN", 
+		new BMessage(kMsgPPPOE)); 
+
+	fNetworkMenu->AddItem(fVPNMenu);
+	*/
+	useroptGroup->GroupLayout()->AddView(fNetworkMenuField);
+
+	fMoveToMenu = new BPopUpMenu("Select a Location");
+	fMoveToMenu->SetLabelFromMarked(false);
+
+	fMoveToMenuField = new BMenuField("Move To :", fMoveToMenu);
+
+	useroptGroup->GroupLayout()->AddView(fMoveToMenuField);
+
+	fRemoveButton = new BButton("Remove",
+		new BMessage(kMsgRemoveNetwork));                                
+
+	useroptGroup->GroupLayout()->AddView(fRemoveButton);
+	
+	_FindAndAddEthernetInterfaces();
+
+	rootLayout->AddView(firstGroup);
+	rootLayout->AddView(bboxGroup);
+	rootLayout->AddView(useroptGroup);
+}
+
+
+LocationView::~LocationView()
+{
+
+}
+
+
+void
+LocationView::AttachedToWindow()
+{
+	fPreferredISP->Menu()->SetTargetForItems(this);
+	fNetworkMenuField->Menu()->SetTargetForItems(this);
+	fMoveToMenuField->Menu()->SetTargetForItems(this);
+	fRemoveButton->SetTarget(this);
+}
+
+
+void
+LocationView::DetachedFromWindow()
+{
+	fPreferredISP->Menu()->SetTargetForItems(this);
+	fNetworkMenuField->Menu()->SetTargetForItems(this);
+	fMoveToMenuField->Menu()->SetTargetForItems(this);
+	fRemoveButton->SetTarget(this);
+}
+
+
+void
+LocationView::SetGlobal(bool ifGlobal)
+{
+	fIfGlobal = ifGlobal;
+}
+
+
+bool
+LocationView::IfGlobal()
+{
+	return fIfGlobal;
+}
+
+
+status_t
+LocationView::DeleteLocationAndNetworks()
+{
+	fNetworksMenuView->DeleteAllNetworks();
+	fLocationSettings->DeleteSettings();
+	fLocationSettings->DeleteLocationDirectory(fLocationPath);
+
+	return B_OK;
+}
+
+
+void
+LocationView::LocationAdded(const char* locationName,
+	LocationView* newLocation)
+{
+	BMessage* message = new BMessage(kMsgMoveToLocation);
+	message->AddPointer("location_pointer", (const void*) newLocation);
+	BMenuItem* item = new BMenuItem(locationName, message);
+	fMoveToMenu->AddItem(item);
+	fMoveToMenu->SetTargetForItems(this);
+}
+
+
+void
+LocationView::LocationRemoved(const char* locationName)
+{
+	BMenuItem* item = fMoveToMenu->FindItem(locationName);
+	fMoveToMenu->RemoveItem(item);
+}
+
+
+void
+LocationView::SetName(const char* locationName)
+{
+	fName = BString(locationName);
+}
+
+
+const char*
+LocationView::GetName()
+{
+	return fName.String();
+}
+
+
+status_t
+LocationView::MoveNetworkHere(NetworkTypeView* network)
+{
+	return fNetworksMenuView->MoveNetwork(network);
+}
+
+
+const char*
+LocationView::GetPath()
+{
+	return fLocationPath.Path();
+}
+
+
+NetworksMenuView*
+LocationView::GetNetworksMenuView()
+{
+return fNetworksMenuView;
+}
+
+
+void
+LocationView::MessageReceived(BMessage* message)
+{
+	switch (message->what) {
+
+		case kMsgRemoveNetwork:
+		{
+			fNetworksMenuView->RemoveNetwork();
+			break;
+		}
+
+
+		case kMsgPPPOE:
+		{
+			TextEntryWindow* window = new TextEntryWindow(
+				"Select the name of the Network:");
+
+			const char* text = window->Go();
+			if (text == NULL)
+				break;
+			BString string = BString(text);
+
+			fNetworksMenuView->AddPPPoENetwork(string,
+				fLocationPath);
+
+			delete window;
+			break;
+		}
+
+
+		case kMsgMoveToLocation:
+		{
+			LocationView* location = NULL;
+			status_t ret = 0;
+
+			ret = message->FindPointer("location_pointer",
+				(void**) &location);
+			if (ret < B_OK) {
+				printf("LocationView: FindPointer %s\n", strerror(ret));
+				break;
+			}
+			BPath path = BPath(fLocationPath.Path());
+
+			NetworkTypeView* view =
+				fNetworksMenuView->GetSelectedNetwork();
+			if (view == NULL) {
+				#ifdef DEBUG
+				printf("LocationView::NetworkTypeView* view is NULL\n");
+				#endif
+				break;
+			}
+			
+			if (view->IfHwDevice()) {
+				BAlert* alert = new BAlert("Warning!",
+				"The Hardware devices cannot be moved!\n",
+				"OK", NULL, NULL, B_WIDTH_AS_USUAL, B_STOP_ALERT);
+				alert->Go();
+				break;
+			}
+
+			path.Append(view->Name());
+			
+			ret = fLocationSettings->MoveNetworkFile(path,
+				location->GetPath());
+			if (ret < B_OK) {
+				#ifdef DEBUG
+				printf("LocationView::MessageReceived \
+					MoveNetworkFile %s \n", strerror(ret));
+				#endif
+				break;
+			}
+
+			path = location->GetPath();
+			path.Append(view->Name());
+
+			view->ChangeSettingsFilePath(path);
+
+			fNetworksMenuView->SelectedNetworkMoved();
+			location->MoveNetworkHere(view);
+			break;
+		}
+
+	default:
+		BView::MessageReceived(message);
+	}
+}
+
+
+void
+LocationView::_PopulateMoveToMenu(BObjectList<LocationView> &list)
+{
+	int count = list.CountItems();
+	int i;
+	LocationView* location;
+
+	for (i = 0; i < count; i++) {
+		location = list.ItemAt(i);
+		LocationAdded(location->GetName(), location);
+	}
+}
+
+
+void
+LocationView::_FindAndAddEthernetInterfaces()
+{
+	BObjectList<BString> adaptersList;
+	fLocationSettings->_FindEthernetDevices(&adaptersList);
+	int count = adaptersList.CountItems();
+	int i;
+
+	for (i = 0; i < count; i++) {
+		// da controllare se non funziona rimettere & ad adapter
+		BString adapter = *adaptersList.ItemAt(i);
+		BPath adapterPath = BPath(fLocationPath);
+		fNetworksMenuView->AddEthernetAdapter(adapter, fLocationPath);
+	}
+}

Proprietà modificate su: src/preferences/network/LocationView.cpp
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/EthernetSettings.h
===================================================================
--- src/preferences/network/EthernetSettings.h	(revisione 0)
+++ src/preferences/network/EthernetSettings.h	(revisione 0)
@@ -0,0 +1,76 @@
+/*
+ * Copyright 2008 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *		Casalinuovo Dario, barrett666@gmail.com
+ */
+
+#ifndef ETHERNET_SETTINGS_H
+#define ETHERNET_SETTINGS_H
+
+#include "Settings.h"
+
+#include <ObjectList.h>
+#include <String.h>
+
+class EthernetSettings : public Settings {
+public:
+					EthernetSettings(BPath settingsPath, const char* name);
+		virtual		~EthernetSettings();
+
+		status_t	LoadSettings();
+		status_t	ApplySettings();
+		status_t	SaveSettings();
+
+		void		SetDomain(const char* domain) {fDomain.SetTo(domain);}
+		void		SetName(BString name);
+		void		SetIP(const char* ip) {fIP.SetTo(ip); }
+		void		SetNetmask(const char* ip) {fSubnetMask.SetTo(ip); }
+		void		SetGateway(const char* ip) {fGateway.SetTo(ip); }
+
+		void		SetAutoConfigure(bool t) {fAuto = t; }
+
+		bool		GetAutoConfigure() { return fAuto; }
+
+		status_t	AutoConfigureAllSettings();
+		bool		IfConfigured();
+
+		const char* GetDomain() {return fDomain.String();}
+		const char* GetName()  {return fName.String(); }
+		const char* GetIP()  {return fIP.String(); }		
+		const char* GetNetmask()  {return fSubnetMask.String(); }
+		const char* GetGateway()  {return fGateway.String(); }
+
+		void 		ReadConfiguration();
+
+		status_t	TriggerAutoConfig();
+
+		BObjectList<BString>& NameServers() {return fNameServers; }
+
+private:
+		bool		_PrepareRequest(struct ifreq& request);
+		void		_SaveAdapterConfiguration();
+		void		_SaveDNSConfiguration();
+		status_t	_GetPath(const char* name, BPath& path);
+
+		BObjectList<BString> fNameServers;
+
+//		int32 		fAutoIPv4;
+
+		int 		fSocket;
+
+		bool 		fConfigured;
+		bool 		fAuto;
+		
+		BString		fDomain;
+		BString 	fIP;
+		BString 	fSubnetMask;
+		BString 	fGateway;
+
+		BString		fName;
+
+		BString 	fIPv6;
+		BString 	fPrefix;
+};
+#endif /* ETHERNET_SETTINGS_H */

Proprietà modificate su: src/preferences/network/EthernetSettings.h
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/PPPoESettings.cpp
===================================================================
--- src/preferences/network/PPPoESettings.cpp	(revisione 0)
+++ src/preferences/network/PPPoESettings.cpp	(revisione 0)
@@ -0,0 +1,51 @@
+/*
+ * Copyright 2009 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *		Casalinuovo Dario, barrett666@gmail.com
+ */
+#include "PPPoESettings.h"
+
+PPPoESettings::PPPoESettings(BPath settingsPath)
+	: Settings(settingsPath)
+{
+
+}
+
+
+PPPoESettings::~PPPoESettings() 
+{
+
+}
+
+
+status_t
+PPPoESettings::LoadSettings()
+{
+	return B_OK;
+}
+
+
+status_t
+PPPoESettings::ApplySettings()
+{
+	return B_OK;
+}
+
+
+status_t 
+PPPoESettings::SaveSettings()
+{
+	return B_OK;
+}
+
+
+void
+PPPoESettings::ChangeSettingsFilePath(BPath path)
+{
+		fSettingsFile->SetTo(path.Path(), B_READ_WRITE 
+			| B_CREATE_FILE);
+
+		fSettingsPath = path;
+}

Proprietà modificate su: src/preferences/network/PPPoESettings.cpp
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/Settings.h
===================================================================
--- src/preferences/network/Settings.h	(revisione 36388)
+++ src/preferences/network/Settings.h	(copia locale)
@@ -1,53 +1,45 @@
 /*
- * Copyright 2004-2009 Haiku Inc. All rights reserved.
+ * Copyright 2008 Haiku Inc. All rights reserved.
  * Distributed under the terms of the MIT License.
  *
- * Authors:
- *		Andre Alves Garzia, andre@andregarzia.com
- *		Vegard Wærp, vegarwa@online.no
+ * Author:
+ *		Casalinuovo Dario, barrett666@gmail.com
  */
-#ifndef SETTINGS_H
-#define SETTINGS_H
+#ifndef PREFLET_SETTINGS_H
+#define PREFLET_SETTINGS_H
 
-
-#include <ObjectList.h>
+#include <File.h>
+#include <Message.h>
+#include <Path.h>
 #include <String.h>
 
+class Settings : public BMessage {
+	public:
+						Settings(BPath path);
+		virtual			~Settings();
 
-class Settings {
-public:
-								Settings(const char* name);
-	virtual						~Settings();
+		status_t		OpenSettings();
 
-			void				SetIP(BString ip) { fIP = ip; }
-			void				SetGateway(BString ip) { fGateway = ip; }
-			void				SetNetmask(BString ip) { fNetmask = ip; }
-			void				SetDomain(BString domain) { fDomain = domain; }
-			void				SetAutoConfigure(bool autoConfigure)
-									{ fAuto = autoConfigure; }
+		status_t		ReadSetting(const char* name, BString* string);
+		status_t		ReadSetting(const char* name, int32* setting);
+		status_t		ReadSetting(const char* name, bool* setting);
 
-			const char*			IP()  { return fIP.String(); }
-			const char*			Gateway()  { return fGateway.String(); }
-			const char*			Netmask()  { return fNetmask.String(); }
-			const char*			Name()  { return fName.String(); }
-			const char*			Domain() { return fDomain.String(); }
-			bool				AutoConfigure() { return fAuto; }
+		status_t		WriteSetting(const char* name, const char* string);
+		status_t		WriteSetting(const char* name, int32 setting);
+		status_t		WriteSetting(const char* name, bool setting);
+		
+		status_t		ReplaceSetting(const char* name, const char* string);
+		status_t		ReplaceSetting(const char* name, int32 setting);
+		status_t		ReplaceSetting(const char* name, bool setting);
 
-			BObjectList<BString>& NameServers() { return fNameServers; }
+		status_t		RemoveSetting(const char* name);
 
-			void				ReadConfiguration();
+		status_t		FlattenSettings();
+		
+		status_t		DeleteSettings();
+	protected:
+		BFile*			fSettingsFile;
+		BPath			fSettingsPath;
+}; /* SETTINGS_H */
 
-private:
-			bool				_PrepareRequest(struct ifreq& request);
-
-			BString				fIP;
-			BString				fGateway;
-			BString				fNetmask;
-			BString				fName;
-			BString				fDomain;
-			int					fSocket;
-			bool				fAuto;
-			BObjectList<BString> fNameServers;
-};
-
-#endif /* SETTINGS_H */
+#endif
Index: src/preferences/network/LocationView.h
===================================================================
--- src/preferences/network/LocationView.h	(revisione 0)
+++ src/preferences/network/LocationView.h	(revisione 0)
@@ -0,0 +1,88 @@
+/*
+ * Copyright 2008-2010 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *      Dario "Barrett" Casalinuovo - barrett666@gmail.com
+ *      
+ *      
+ */
+#ifndef LOCATION_VIEW_H
+#define LOCATION_VIEW_H
+
+#include <View.h>
+#include <Path.h>
+#include <String.h>
+#include <ObjectList.h>
+
+class BButton;
+class BMenu;
+class BMenuField;
+//class BPath;
+class BPopUpMenu;
+//class BString;
+
+class LocationSettings;
+class NetworkTypeView;
+class NetworksMenuView;
+
+class LocationView : public BView {
+public: 
+							LocationView(const char* locationName, 
+								BObjectList<LocationView> &list);
+
+							LocationView(); 
+							// constructor for the global location
+		virtual 			~LocationView();
+
+		void 				MessageReceived(BMessage* message);
+
+		status_t			MoveNetworkHere(NetworkTypeView* network);
+
+		void				SetName(const char* name);
+		const char*			GetName();
+		
+		const char*			GetPath();
+
+		void 				SetGlobal(bool ifGlobal);
+		bool 				IfGlobal();
+
+		status_t 			DeleteLocationAndNetworks();
+		void 				LocationRemoved(const char* locationName);
+		void 				LocationAdded(const char* locationName,
+							LocationView* newLocation);
+
+		NetworksMenuView*   GetNetworksMenuView();
+
+virtual void 				AttachedToWindow();
+virtual void 				DetachedFromWindow();
+
+private:		
+		void				_FindAndAddEthernetInterfaces(); 
+				// TODO maybe should be moved to EthernetSettings
+
+		void				_PopulateMoveToMenu(
+								BObjectList<LocationView> &list);
+
+		BString				fName;
+		bool 				fIfGlobal;
+
+		BMenuField* 		fPreferredISP;
+		BMenu* 				fIspMenu;
+
+		BPopUpMenu* 		fNetworkMenu;
+		BPopUpMenu* 		fMoveToMenu;
+
+		BButton* 			fRemoveButton;
+		BPath 				fLocationPath;
+		BPath				fSettingsPath;
+
+		NetworksMenuView* 	fNetworksMenuView;
+
+		BMenuField*			fNetworkMenuField;
+		BMenuField* 	  	fMoveToMenuField;
+
+		LocationSettings* 	fLocationSettings;
+};
+
+#endif

Proprietà modificate su: src/preferences/network/LocationView.h
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/PPPoESettings.h
===================================================================
--- src/preferences/network/PPPoESettings.h	(revisione 0)
+++ src/preferences/network/PPPoESettings.h	(revisione 0)
@@ -0,0 +1,31 @@
+/*
+ * Copyright 2009 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *		Casalinuovo Dario, barrett666@gmail.com
+ */
+
+#ifndef PPPoE_SETTINGS_H
+#define PPPoE_SETTINGS_H
+
+#include "Settings.h"
+
+#include <ObjectList.h>
+#include <String.h>
+
+class PPPoESettings : public Settings {
+public:
+					PPPoESettings(BPath settingsPath);
+		virtual		~PPPoESettings();
+
+		status_t	LoadSettings();
+		status_t	ApplySettings();
+		status_t	SaveSettings();
+		
+		void		ChangeSettingsFilePath(BPath path);
+
+private:
+
+};
+#endif /* PPPoE_SETTINGS_H */

Proprietà modificate su: src/preferences/network/PPPoESettings.h
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/NetworkSettings.cpp
===================================================================
--- src/preferences/network/NetworkSettings.cpp	(revisione 0)
+++ src/preferences/network/NetworkSettings.cpp	(revisione 0)
@@ -0,0 +1,161 @@
+/*
+ * Copyright 2008 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *		Casalinuovo Dario, barrett666@gmail.com
+ */
+#include "NetworkSettings.h"
+
+#include <FindDirectory.h>
+#include <Directory.h>
+
+#include <stdio.h>
+
+#define PFLT_CONFIGURED "configured"
+#define PFLT_COMPUTER_NAME "computer_name"
+
+NetworkSettings::NetworkSettings(BPath settingsPath)
+	: Settings(settingsPath)
+{
+
+}
+
+
+NetworkSettings :: ~NetworkSettings() 
+{
+
+}
+
+
+status_t
+NetworkSettings::LoadSettings()
+{
+	printf("NetworkSettings LoadSettings\n");
+	status_t ret;
+/*
+	ret = ReadSetting(PFLT_COMPUTER_NAME, &fComputerName);
+	if (ret < B_OK)
+		return ret;
+*/
+	fComputerName = BString(_ReadComputerName());
+
+	ret = ReadSetting(PFLT_CONFIGURED, &fConfigured);
+	if (ret < B_OK)
+		return ret;
+	
+	return B_OK;
+}
+
+
+const char*
+NetworkSettings::_ReadComputerName()
+{
+	BFile hostname;
+	BString name = BString();
+	char buf[1024];
+	ssize_t ret;
+
+	status_t err;
+	err = find_directory(B_COMMON_SETTINGS_DIRECTORY,
+		&fHostNamePath, true);
+	
+	fHostNamePath.Append("network/hostname"); 
+	hostname = BFile(fHostNamePath.Path(),
+		B_READ_ONLY);
+	
+	while (true) {
+		ret = hostname.Read((void*) buf, 1024);
+
+		if (ret < 0) {
+			return NULL;
+		} else if (ret == 0) {
+			break;
+		}
+
+		buf[ret] = '\0';
+		#ifdef DEBUG
+		printf("%s\n", buf);
+		#endif
+		name.Append(buf);
+	}
+
+	return name.String();
+}
+
+
+void
+NetworkSettings::_SaveComputerName()
+{
+	BFile file(fHostNamePath.Path(),
+		B_CREATE_FILE | B_ERASE_FILE | B_WRITE_ONLY);
+	
+	file.Write(fComputerName.String(), fComputerName.Length());
+}
+
+
+status_t 
+NetworkSettings::SaveSettings()
+{
+	status_t ret;
+//
+	if (fConfigured == true) {
+		_SaveComputerName();
+
+		ret = ReplaceSetting(PFLT_CONFIGURED, true);
+		if (ret < B_OK)
+			return ret;
+	} else {
+		_SaveComputerName();
+
+		ret = WriteSetting(PFLT_CONFIGURED, true);
+		if (ret < B_OK)
+			return ret;
+	}
+	return FlattenSettings();
+}
+
+
+status_t
+NetworkSettings::MakeBaseDir()
+{
+	BPath path;
+	status_t err;
+	err = find_directory(B_COMMON_SETTINGS_DIRECTORY,
+		&path, true);
+
+	path.Append("network");
+
+	BDirectory directory = BDirectory(path.Path());
+	BDirectory parentDirectory = BDirectory();
+
+	status_t ret = directory.CreateDirectory("profiles", &parentDirectory);
+	if (ret < B_OK) 
+		return ret;
+
+	return B_OK;
+}
+
+
+status_t
+NetworkSettings::AutoConfigureAllSettings()
+{
+	SetComputerName("HaikuBox");
+
+	return B_OK;
+}
+
+
+bool
+NetworkSettings::IfConfigured()
+{
+	if (ReadSetting(PFLT_CONFIGURED, &fConfigured) < B_OK)
+		return false;
+
+	if (fConfigured == true) {
+		return true;
+	} else if (fConfigured == false) {
+		return false;
+	}
+	return false;
+}

Proprietà modificate su: src/preferences/network/NetworkSettings.cpp
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/PPPoEView.cpp
===================================================================
--- src/preferences/network/PPPoEView.cpp	(revisione 0)
+++ src/preferences/network/PPPoEView.cpp	(revisione 0)
@@ -0,0 +1,88 @@
+/*
+ * Copyright 2009 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *      Dario "Barrett" Casalinuovo - barrett666@gmail.com
+ *
+ *
+ */
+
+#include "PPPoEView.h"
+
+#include <stdio.h>
+
+#include <GroupLayout.h>
+#include <GroupView.h>
+#include <Path.h>
+#include <String.h>
+#include <StringView.h>
+#include <View.h>
+
+PPPoEView::PPPoEView(BPath path, BString networkName)
+	: NetworkTypeView(networkName.String(), 0, NULL)
+{
+	fSettingsPath = BPath(path);
+	fNetworkName = BString(networkName);
+
+	fSettings = new PPPoESettings(fSettingsPath);
+
+	SetViewColor(ui_color(B_PANEL_BACKGROUND_COLOR));
+	BGroupLayout* rootLayout = new BGroupLayout(B_VERTICAL);
+	SetLayout(rootLayout);
+
+	BGroupView* firstGroup = new BGroupView(B_HORIZONTAL);
+
+	BStringView* fStringView = new BStringView("strview", path.Path(),
+		B_WILL_DRAW); // only for debugging
+
+	firstGroup->GroupLayout()->AddView(fStringView);
+	rootLayout->AddView(firstGroup);
+}
+
+
+PPPoEView::~PPPoEView()
+{
+
+}
+
+
+void
+PPPoEView::AttachedToWindow()
+{
+
+}
+
+
+void
+PPPoEView::DetachedFromWindow()
+{
+
+}
+
+
+void
+PPPoEView::DeleteNetworkAndSettings()
+{
+	fSettings->DeleteSettings();
+}
+
+
+void
+PPPoEView::ChangeSettingsFilePath(BPath path)
+{
+	fSettingsPath = path;
+	fSettings->ChangeSettingsFilePath(path);
+	printf("PPPoEView::ChangeSettingsFilePath %s\n", fSettingsPath.Path());
+}
+
+
+void
+PPPoEView::MessageReceived(BMessage* message)
+{
+	switch (message->what) {
+
+		default:
+			BView::MessageReceived(message);
+	}
+}

Proprietà modificate su: src/preferences/network/PPPoEView.cpp
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/NetworkSettings.h
===================================================================
--- src/preferences/network/NetworkSettings.h	(revisione 0)
+++ src/preferences/network/NetworkSettings.h	(revisione 0)
@@ -0,0 +1,42 @@
+/*
+ * Copyright 2008 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *		Casalinuovo Dario, barrett666@gmail.com
+ */
+
+#ifndef NETWORKS_SETTINGS_H
+#define NETWORKS_SETTINGS_H
+
+#include <ObjectList.h>
+#include <String.h>
+
+#include "Settings.h"
+
+class NetworkSettings : public Settings {
+public:
+				NetworkSettings(BPath settingsPath);
+	virtual		~NetworkSettings();
+	
+	status_t	MakeBaseDir();
+
+	status_t 	LoadSettings();
+	status_t 	SaveSettings();
+
+	status_t 	AutoConfigureAllSettings();
+	bool		IfConfigured();
+
+	void		SetComputerName(const char* pcname) { fComputerName.SetTo(pcname); }
+	const char* GetComputerName() { return fComputerName.String(); }
+
+private:
+	const char* _ReadComputerName();
+	void 		_SaveComputerName(); 
+
+	BString 	fComputerName;
+	BPath		fSettingsPath;
+	BPath		fHostNamePath;
+	bool 		fConfigured;
+};
+#endif /* NETWORKS_SETTINGS_H */

Proprietà modificate su: src/preferences/network/NetworkSettings.h
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/NetworkWindow.cpp
===================================================================
--- src/preferences/network/NetworkWindow.cpp	(revisione 36388)
+++ src/preferences/network/NetworkWindow.cpp	(copia locale)
@@ -4,28 +4,26 @@
  *
  * Author:
  *		Andre Alves Garzia, andre@andregarzia.com
+ * 		Dario "Barrett" Casalinuovo, Barrett666@gmail.com
  */
 
-#include "NetworkWindow.h"
-
 #include <Application.h>
-#include <Catalog.h>
+#include <File.h>
 #include <GroupLayout.h>
-#include <Locale.h>
 
-#include "EthernetSettingsView.h"
+#include <stdio.h>
 
-#undef TR_CONTEXT
-#define TR_CONTEXT "NetworkWindow"
+#include "NetworkWindow.h"
+#include "NetworkView.h"
 
 NetworkWindow::NetworkWindow()
-	: BWindow(BRect(50, 50, 269, 302), TR("Network"), B_TITLED_WINDOW,
-		B_NOT_RESIZABLE | B_ASYNCHRONOUS_CONTROLS | B_NOT_ZOOMABLE
+	: BWindow(BRect(50, 50, 400, 500), "Network", B_TITLED_WINDOW,
+		B_ASYNCHRONOUS_CONTROLS | B_NOT_ZOOMABLE
 		| B_AUTO_UPDATE_SIZE_LIMITS)
 {
 	SetLayout(new BGroupLayout(B_HORIZONTAL));
-	fEthernetView = new EthernetSettingsView();
-	GetLayout()->AddView(fEthernetView);
+	fNetworkView = new NetworkView();
+	GetLayout()->AddView(fNetworkView);
 }
 
 
Index: src/preferences/network/PPPoEView.h
===================================================================
--- src/preferences/network/PPPoEView.h	(revisione 0)
+++ src/preferences/network/PPPoEView.h	(revisione 0)
@@ -0,0 +1,41 @@
+/*
+ * Copyright 2009 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *      Dario "Barrett" Casalinuovo - barrett666@gmail.com
+ *      
+ *      
+ */
+
+#ifndef PPPOE_VIEW_H
+#define PPPOE_VIEW_H
+
+
+#include "NetworkTypeView.h"
+#include "PPPoESettings.h"
+
+class BPath;
+class BStringView;
+
+class PPPoEView : public NetworkTypeView {
+public:
+							PPPoEView(BPath path, BString networkName);
+		virtual				~PPPoEView();
+
+		virtual	void		MessageReceived(BMessage* message);
+		virtual	void		AttachedToWindow();
+		virtual	void		DetachedFromWindow();
+
+		void				DeleteNetworkAndSettings();
+		void				ChangeSettingsFilePath(BPath path);
+
+private:
+		PPPoESettings*		fSettings;
+		BString				fNetworkName;
+		BPath				fSettingsPath;
+		BStringView*		fStringView;
+
+};
+
+#endif

Proprietà modificate su: src/preferences/network/PPPoEView.h
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/NetworkView.cpp
===================================================================
--- src/preferences/network/NetworkView.cpp	(revisione 0)
+++ src/preferences/network/NetworkView.cpp	(revisione 0)
@@ -0,0 +1,594 @@
+/*
+ * Copyright 2008-2009 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *      Dario "Barrett" Casalinuovo - barrett666@gmail.com     
+ *      
+ */
+#include "NetworkView.h"
+
+#include <Alert.h>
+#include <Box.h>
+#include <Button.h>
+#include <CheckBox.h>
+#include <Deskbar.h>
+#include <Directory.h>
+#include <Entry.h>
+#include <File.h>
+#include <FindDirectory.h>
+#include <GridView.h>
+#include <GroupView.h>
+#include <LayoutItem.h>
+#include <Menu.h>
+#include <MenuField.h>
+#include <MenuItem.h>
+#include <ObjectList.h>
+#include <Path.h>
+#include <PopUpMenu.h>
+#include <SpaceLayoutItem.h>
+#include <SupportDefs.h>
+#include <Roster.h>
+#include <String.h>
+#include <TextControl.h>
+#include <View.h>
+
+#include <stdio.h>
+#include <stdlib.h>
+
+#include "LocationView.h"
+#include "NetworkSettings.h"
+#include "NetworksMenuView.h"
+#include "TextEntryWindow.h"
+
+const uint32 kMsgSelectedLocation = 'sllc';
+const uint32 kMsgAddNewLocation = 'anlc';
+const uint32 kMsgRemoveLocation = 'rmlc';
+
+const uint32 kMsgInstallInDeskbar = 'iidb';
+const uint32 kMsgRevertAll = 'rvrt';
+const uint32 kMsgSetName = 'stnm';
+
+const uint32 kMsgSetLocationName = 'stln';
+
+NetworkView::NetworkView() 
+	: BView("NetworkView", 0, NULL)
+{
+	SetViewColor(ui_color(B_PANEL_BACKGROUND_COLOR));
+
+	BGroupLayout* rootLayout = new BGroupLayout(B_VERTICAL);
+
+	SetLayout(rootLayout);
+
+	BGridView* informationsGroup = new BGridView();
+
+	BGridLayout* layout = informationsGroup->GridLayout();
+
+	// insets
+
+	float inset = ceilf(be_plain_font->Size() * 0.7);
+	rootLayout->SetInsets(inset, inset, inset, inset);
+	rootLayout->SetSpacing(inset);
+	layout->SetSpacing(inset, inset); 
+
+	/* making the gui...*/
+
+	fLocationsGroup = new BGroupView(B_VERTICAL);
+	
+	fNetworkSettings->MakeBaseDir();
+	
+	find_directory(B_COMMON_SETTINGS_DIRECTORY, 
+		&fSettingsPath, true);
+	fSettingsPath.Append("network/profiles");
+
+	_BuildLocationsMenu();
+
+	fLocationsMenuField = new BMenuField("Location :", fLocationsMenu);
+
+	layout->AddItem(fLocationsMenuField->CreateLabelLayoutItem(), 0, 0); 
+	layout->AddItem(fLocationsMenuField->CreateMenuBarLayoutItem(), 1, 0);
+
+	fComputerNameTextControl = new BTextControl("Computer Name :", "",
+		new BMessage(kMsgSetName));
+
+	layout->AddItem(fComputerNameTextControl->CreateLabelLayoutItem(),
+		0, 1.5);
+	layout->AddItem(fComputerNameTextControl->CreateTextViewLayoutItem(),
+		1, 1.5);  
+
+	// --- 
+	BGroupView* endofguiGroup = new BGroupView(B_VERTICAL);
+
+	fShowNetworkInDeskbar = new BCheckBox("Show Networks icon in Deskbar.",
+		new BMessage(kMsgInstallInDeskbar));
+
+	fShowNetworkInDeskbar->SetValue(_IfInstalled());
+
+	endofguiGroup->GroupLayout()->AddView(fShowNetworkInDeskbar);
+
+	fRevertButton = new BButton("Revert All", new BMessage(kMsgRevertAll));
+	endofguiGroup->GroupLayout()->AddItem(BSpaceLayoutItem::CreateGlue());
+	endofguiGroup->GroupLayout()->AddView(fRevertButton);
+
+	// attaching all to the view
+
+	rootLayout->AddView(informationsGroup);
+	rootLayout->AddView(fLocationsGroup);
+	rootLayout->AddView(endofguiGroup);
+
+	status_t ret = _LoadConfiguration();
+
+	if (ret < B_OK)
+		printf("LoadConfiguration Error : %s", strerror(ret));
+}
+
+
+NetworkView::~NetworkView()
+{
+	if (_SaveConfiguration() < B_OK)
+		printf("_SaveConfiguration() failed");
+}
+
+
+void
+NetworkView::AttachedToWindow()
+{
+	fLocationsMenuField->Menu()->SetTargetForItems(this);
+	fShowNetworkInDeskbar->SetTarget(this);
+	fRevertButton->SetTarget(this);
+	fComputerNameTextControl->SetTarget(this);
+}
+
+
+void
+NetworkView::DetachedFromWindow()
+{
+
+}
+
+
+void
+NetworkView::MessageReceived(BMessage* message)
+{
+	switch (message->what) {
+	
+		case kMsgInstallInDeskbar:
+		{
+			if (fShowNetworkInDeskbar->Value() == B_CONTROL_ON) {
+				_InstallInDeskbar();
+			} else if (fShowNetworkInDeskbar->Value() == B_CONTROL_OFF) {
+				_RemoveFromDeskbar();	
+			}
+			break;
+		}	
+
+		case kMsgRevertAll:
+		{			
+			fCurrentLocation->GetNetworksMenuView()->RevertAll();
+			break;
+		}
+
+		case kMsgSetName:
+		{
+			fNetworkSettings->SetComputerName(
+				fComputerNameTextControl->Text());
+			break;
+		}
+		
+		case kMsgSelectedLocation:
+		{	
+			fCurrentLocationMenu = fLocationsMenu->FindMarked(); 
+
+			_HideAllLocations();
+
+			status_t ret = message->FindPointer("location_pointer",
+				(void**)&fCurrentLocation);
+
+			if (ret < B_OK)
+				printf("Error : %s", strerror(ret));
+
+			fLocationsGroup->AddChild(fCurrentLocation);
+			break;
+		}
+
+		
+		case kMsgAddNewLocation:
+		{
+			const char* locationName;
+			TextEntryWindow* getNameWindow = new TextEntryWindow(
+				"Select the name of the location:");
+			locationName = getNameWindow->Go();
+			char* name;
+			(void*) name = malloc(strlen(locationName));
+			strcpy(name, locationName);
+			status_t ret = _AddNewLocation((const char*) name);
+			if (ret < B_OK) {
+				BString errorMessage("An error has occurred creating \
+					the location\n\n Error: ");
+				errorMessage << strerror(ret);
+				BAlert* alert = new BAlert("Warning",
+					errorMessage.String(), "Ok");
+
+				alert->Go();
+
+				_SelectGlobalLocation();
+				break;
+			}
+			break;
+		}
+
+		case kMsgRemoveLocation:
+		{
+			status_t ret = _RemoveLocation();
+			if (ret < B_OK)
+				printf("Error : %s", strerror(ret));
+			break;
+		}
+
+		
+		default:
+			BView::MessageReceived(message);
+	}
+}
+
+
+void
+NetworkView::_HideAllLocations()
+{
+	int32 childrens = fLocationsGroup->CountChildren();
+	int i;
+
+	for (i = 0; i < childrens; i++) {	
+		BView* currView = fLocationsGroup->ChildAt(i);
+		if (currView == NULL)
+			break;
+
+		fLocationsGroup->RemoveChild(currView);
+	}
+}
+
+
+status_t
+NetworkView::_SaveConfiguration()
+{
+	fNetworkSettings->SetComputerName(fComputerNameTextControl->Text());
+	status_t ret = fNetworkSettings->SaveSettings();
+	if (ret < B_OK)
+		printf("NetworkView save error %s\n",strerror(ret));
+
+	return B_OK;
+}
+
+
+status_t
+NetworkView::_LoadConfiguration()
+{
+	status_t ret;
+	BPath path = fSettingsPath;
+	path.Append("settings");
+	fNetworkSettings = new NetworkSettings(path);
+
+	ret = fNetworkSettings->OpenSettings();
+	if (ret < B_OK)
+		return ret;
+
+	if (fNetworkSettings->IfConfigured() == false) {
+		fNetworkSettings->AutoConfigureAllSettings();
+	} else {
+		ret = fNetworkSettings->LoadSettings();
+		if (ret < B_OK) {
+			#ifdef DEBUG
+			printf("LoadSettings() Error : %s\n",strerror(ret));
+			#endif
+			return ret;
+		}
+	}
+
+	fComputerNameTextControl->SetText(fNetworkSettings->GetComputerName());
+
+	ret = _FindAndAddLocations();
+	if (ret < B_OK) {
+		#ifdef DEBUG
+		printf("%s", strerror(ret));
+		#endif
+		return ret;
+	}
+
+	return B_OK;
+}
+
+
+void
+NetworkView::_BuildLocationsMenu()
+{
+	fLocationsMenu = new BPopUpMenu("Locations menu");
+
+	_BuildGlobalLocation(); // build the menu and the view
+
+	fLocationsMenu->AddItem(new BSeparatorItem);
+
+	BMenuItem* item = new BMenuItem("Add New Location",
+		new BMessage(kMsgAddNewLocation));
+
+	fLocationsMenu->AddItem(item);
+
+	item = new BMenuItem("Remove Current Location",
+		new BMessage(kMsgRemoveLocation));
+
+	fLocationsMenu->AddItem(item);
+
+	fLocationsMenu->AddItem(new BSeparatorItem);
+}
+
+
+void
+NetworkView::_BuildGlobalLocation()
+{
+	BDirectory directory = BDirectory(fSettingsPath.Path());
+	BDirectory lcDirectory = BDirectory();
+
+	directory.CreateDirectory("global", &lcDirectory);
+	// the following constructor is used only for the global location
+	fGlobalLocationView = new LocationView(); 
+	
+	fGlobalLocationView->SetName("Global");
+	
+	fLocationsList.AddItem(fGlobalLocationView);
+
+	BMessage* message = new BMessage(kMsgSelectedLocation);
+
+	message->AddPointer("location_pointer", 
+		(const void*) fGlobalLocationView);
+
+	fGlobalMenuItem = new BMenuItem("Global", message);
+
+	fGlobalMenuItem->SetMarked(true);
+
+	fLocationsMenu->AddItem(fGlobalMenuItem);
+
+	fLocationsGroup->AddChild(fGlobalLocationView);
+}
+
+
+status_t
+NetworkView::_AddNewLocation(const char* locationName)
+{
+	BMessage* message = new BMessage(kMsgSelectedLocation);
+	
+	BDirectory directory = BDirectory(fSettingsPath.Path());
+	BDirectory parentDirectory = BDirectory();
+	
+	status_t ret = directory.CreateDirectory(locationName, &parentDirectory);
+
+	if (ret < B_OK) {
+		BString errorMessage("An error has occurred creating the directory\n\n"
+			"Error: ");
+		errorMessage << strerror(ret);
+		BAlert* alert = new BAlert("launch error", errorMessage.String(),
+			"Ok");
+		alert->Go();
+
+		_SelectGlobalLocation();
+		return ret;
+	}
+	
+	BPath locationPath = fSettingsPath;
+	locationPath.Append(locationName);
+	
+//	#ifdef DEBUG
+	printf("NetworkView:: The name of the location settings file is %s\n",
+		locationPath.Path());
+//	#endif
+	
+	fCurrentLocation = new LocationView(
+		locationName, fLocationsList);
+
+	fCurrentLocation->SetName(locationName);
+	
+	_NotifyLocationAdded(locationName, fCurrentLocation);
+
+	fLocationsList.AddItem(fCurrentLocation);
+	
+	message->AddPointer("location_pointer", 
+		(const void*) fCurrentLocation);
+	
+	fCurrentLocationMenu = new BMenuItem(locationName, message);
+	
+	fCurrentLocationMenu->SetMarked(true);
+	
+	fLocationsMenu->AddItem(fCurrentLocationMenu);
+	
+	fLocationsMenu->SetTargetForItems(this);
+
+	_HideAllLocations();
+	
+	fLocationsGroup->AddChild(fCurrentLocation);
+	fCurrentLocation->Show();
+
+	return B_OK;
+}
+
+
+status_t
+NetworkView::_RestoreLocation(const char* locationName)
+{
+	BMessage* message = new BMessage(kMsgSelectedLocation);
+
+	printf("NetworkView::_RestoreLocation() locatioPath %s\n", locationName);
+	fCurrentLocation = new LocationView(
+		locationName, fLocationsList);
+
+	BString name = BString(locationName);
+	fCurrentLocation->SetName(name.String());
+
+	_NotifyLocationAdded(name.String(), fCurrentLocation);
+
+	fLocationsList.AddItem(fCurrentLocation);
+
+	message->AddPointer("location_pointer", (const void*) fCurrentLocation);
+
+	fCurrentLocationMenu = new BMenuItem(locationName, message);
+
+	fCurrentLocationMenu->SetMarked(true);
+
+	fLocationsMenu->AddItem(fCurrentLocationMenu);
+	
+	fLocationsMenu->SetTargetForItems(this);
+
+	_HideAllLocations();
+
+	fLocationsGroup->AddChild(fCurrentLocation);
+	fCurrentLocation->Show();
+
+	return B_OK;
+}
+
+
+status_t
+NetworkView::_RemoveLocation()
+{
+	BAlert* alert;
+
+	if (fCurrentLocation->IfGlobal()) {
+		alert = new BAlert("Warning!",
+			"The location selected is Global and cannot be deleted!\n",
+			"OK", NULL, NULL, B_WIDTH_AS_USUAL, B_STOP_ALERT);
+		alert->Go();
+
+		_SelectGlobalLocation();
+		return B_OK;
+	}
+
+	alert = new BAlert("Confirm",
+		"Are you sure? The location will be deleted!\n",
+		"No","Yes","Cancel", B_WIDTH_AS_USUAL, B_WARNING_ALERT);
+
+	int32 ret = alert->Go();
+	if (ret == 0 || ret == 2) {
+		fCurrentLocationMenu->SetMarked(true);
+		return B_OK;	
+	}
+
+	_NotifyLocationRemoved(fCurrentLocationMenu->Label()); 
+
+	fCurrentLocation->DeleteLocationAndNetworks();
+	fLocationsMenu->RemoveItem(fCurrentLocationMenu);
+	fLocationsGroup->RemoveChild(fCurrentLocation);
+	fLocationsList.RemoveItem(fCurrentLocation);
+
+	delete fCurrentLocation;
+	delete fCurrentLocationMenu;
+	_SelectGlobalLocation();
+
+	return B_OK;		
+}
+
+
+status_t
+NetworkView::_FindAndAddLocations()
+{	
+	BDirectory* locationsDirectory = new BDirectory(
+		fSettingsPath.Path());
+
+	int32 entries = locationsDirectory->CountEntries();
+	int32 i;
+	status_t ret = B_OK;
+
+	for (i = 0; i < entries; i++) {
+		BEntry* entry = new BEntry();
+
+		ret = locationsDirectory->GetNextEntry(entry, false);
+		if (ret < B_OK || ret == B_ENTRY_NOT_FOUND)
+			continue;
+
+		if (entry->IsDirectory() == true) {
+			char name[B_FILE_NAME_LENGTH];
+
+			entry->GetName(name);
+
+			int str = strcmp((const char*) name, "global");
+			if (name == NULL || str == 0)
+				continue;
+
+			BString st = BString();
+			st.SetTo(name);
+			ret = _RestoreLocation(st.String());
+			printf("NetworkView::_FindAndAddLocations() \
+				location added %s\n", st.String());
+			}
+	}
+	return ret;
+}
+
+
+void
+NetworkView::_NotifyLocationRemoved(const char* locationName)
+{
+	int32 i;
+	int32 loc = fLocationsList.CountItems();
+	for (i = 0; i < loc; i++) {
+		LocationView* location = fLocationsList.ItemAt(i);
+		location->LocationRemoved(locationName);
+	}
+}
+
+
+void
+NetworkView::_NotifyLocationAdded(const char* locationName,
+	LocationView* newLocation)
+{
+	int i;
+	int loc = fLocationsList.CountItems();
+	for (i = 0; i < loc; i++) {
+		LocationView* location = fLocationsList.ItemAt(i);
+		location->LocationAdded(locationName, newLocation);
+	}
+}
+
+
+void
+NetworkView::_SelectGlobalLocation()
+{
+	_HideAllLocations();
+	fGlobalMenuItem->SetMarked(true);
+	fLocationsGroup->AddChild(fGlobalLocationView);
+}
+
+
+void
+NetworkView::_InstallInDeskbar()
+{
+	char* argv[] = {const_cast<char *>("--deskbar"), NULL};
+	
+	status_t ret = be_roster->Launch("application/x-vnd.Haiku-NetworkStatus",
+		1, argv); 
+
+		if (ret < B_OK) {
+		BString errorMessage("Installing NetworkStatus in Deskbar failed.\n\n"
+			"Error: ");
+		errorMessage << strerror(ret);
+		BAlert* alert = new BAlert("launch error", errorMessage.String(),
+			"Ok");
+		alert->Go(NULL);
+		}
+}
+
+
+int32
+NetworkView::_IfInstalled()
+{
+	BDeskbar deskbar;
+	bool ret = deskbar.HasItem("NetworkStatus");
+	if (ret == false)
+		return 0;
+
+	return 1;
+}
+
+
+void
+NetworkView::_RemoveFromDeskbar()
+{
+	BDeskbar deskbar;
+	deskbar.RemoveItem("NetworkStatus");
+}

Proprietà modificate su: src/preferences/network/NetworkView.cpp
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/Jamfile
===================================================================
--- src/preferences/network/Jamfile	(revisione 36388)
+++ src/preferences/network/Jamfile	(copia locale)
@@ -1,17 +1,29 @@
 SubDir HAIKU_TOP src preferences network ;
 
 UsePrivateHeaders shared ;
+UsePrivateHeaders interface ;
+
 UseHeaders [ FDirName $(HAIKU_TOP) src servers net ] : true ;
 
 Preference Network :
-	NetworkApp.cpp
-	NetworkWindow.cpp
-	EthernetSettingsView.cpp
-	Settings.cpp
+         NetworkApp.cpp
+   	 NetworkWindow.cpp
+         NetworkView.cpp
+         TextEntryWindow.cpp
+         LocationView.cpp
+         LocationSettings.cpp
+         NetworkTypeView.cpp
+         EthernetSettingsView.cpp
+         PPPoEView.cpp
+         NetworksMenuView.cpp
+         Settings.cpp
+         EthernetSettings.cpp
+         NetworkSettings.cpp
+         PPPoESettings.cpp
 
-	: be $(HAIKU_NETWORK_LIBS) $(TARGET_LIBSUPC++) liblocale.so
+	: be root $(HAIKU_NETWORK_LIBS) liblocale.so libcolumnlistview.a libshared.a $(TARGET_LIBSUPC++)
 	: Network.rdef
-;
+	;
 
 DoCatalogs Network :
 	x-vnd.Haiku-Network
Index: src/preferences/network/NetworkWindow.h
===================================================================
--- src/preferences/network/NetworkWindow.h	(revisione 36388)
+++ src/preferences/network/NetworkWindow.h	(copia locale)
@@ -11,7 +11,7 @@
 
 #include <Window.h>
 
-#include "EthernetSettingsView.h"
+#include "NetworkView.h"
 
 
 class NetworkWindow : public BWindow {
@@ -22,7 +22,7 @@
 	virtual void	MessageReceived(BMessage* mesage);
 
 private:
-	EthernetSettingsView* fEthernetView;
+	NetworkView*	fNetworkView;
 };
 
 #endif	/* NETWORK_WINDOW_H */
Index: src/preferences/network/NetworkTypeView.cpp
===================================================================
--- src/preferences/network/NetworkTypeView.cpp	(revisione 0)
+++ src/preferences/network/NetworkTypeView.cpp	(revisione 0)
@@ -0,0 +1,86 @@
+/*
+ * Copyright 2009 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *      Dario "Barrett" Casalinuovo - barrett666@gmail.com
+ *
+ *
+ */
+#include "NetworkTypeView.h"
+
+#include <Message.h>
+
+NetworkTypeView::NetworkTypeView(const char* name, uint32 flags,
+	BLayout* layout)
+		: BView(name, flags, layout)
+{
+	fName = BString(name);
+	fIfDevice = false;
+}
+
+
+NetworkTypeView::~NetworkTypeView()
+{
+
+}
+
+
+void
+NetworkTypeView::AttachedToWindow()
+{
+
+}
+
+
+void
+NetworkTypeView::DetachedFromWindow()
+{
+
+}
+
+
+void
+NetworkTypeView::DeleteNetworkAndSettings()
+{
+	
+}
+
+
+void
+NetworkTypeView::ChangeSettingsFilePath(BPath path)
+{
+
+}
+
+
+void
+NetworkTypeView::RevertAll()
+{
+
+}
+
+
+void
+NetworkTypeView::ApplyChanges()
+{
+
+}
+
+
+void
+NetworkTypeView::SetHwDevice(bool ifDevice)
+{
+	fIfDevice = ifDevice;
+}
+
+
+void
+NetworkTypeView::MessageReceived(BMessage* message)
+{
+	switch (message->what) {
+
+		default:
+			BView::MessageReceived(message);
+	}
+}

Proprietà modificate su: src/preferences/network/NetworkTypeView.cpp
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/Network.rdef
===================================================================
--- src/preferences/network/Network.rdef	(revisione 36388)
+++ src/preferences/network/Network.rdef	(copia locale)
@@ -12,7 +12,7 @@
 	internal = 0,
 
 	short_info = "Network",
-	long_info = "Network ©2007-2009 Haiku"
+	long_info = "Network ©2007-2010 Haiku"
 };
 
 resource vector_icon {
Index: src/preferences/network/NetworkView.h
===================================================================
--- src/preferences/network/NetworkView.h	(revisione 0)
+++ src/preferences/network/NetworkView.h	(revisione 0)
@@ -0,0 +1,86 @@
+/*
+ * Copyright 2008-2009 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *      Dario "Barrett" Casalinuovo - barrett666@gmail.com
+ *      
+ *      
+ */
+#ifndef NETWORK_VIEW_H
+#define NETWORK_VIEW_H
+
+#include <ObjectList.h>
+#include <Path.h>
+#include <View.h>
+
+class BBox;
+class BButton;
+class BCheckBox;
+class BGroupView;
+class BMenuItem;
+class BMenuField;
+//class BPath;
+class BPopUpMenu;
+class BTextControl;
+
+class LocationView;
+class NetworkSettings;
+
+class NetworkView : public BView {
+public: 
+						NetworkView();
+						NetworkView(BMessage*);
+virtual 				~NetworkView();
+
+		void 			MessageReceived(BMessage* message);
+
+virtual void 			AttachedToWindow();
+virtual void			DetachedFromWindow();
+
+private:
+		void 			_InstallInDeskbar();
+		int32 			_IfInstalled();
+		void 			_RemoveFromDeskbar();
+
+		void 			_BuildLocationsMenu();
+		void 			_BuildGlobalLocation();
+
+		status_t 		_AddNewLocation(const char* locationName);
+		status_t 		_RestoreLocation(const char* locationName);
+		status_t 		_RemoveLocation();
+		void			_HideAllLocations();
+		
+		status_t 		_FindAndAddLocations();
+
+		void 			_NotifyLocationRemoved(const char* locationName);
+		void 			_NotifyLocationAdded(const char*, LocationView*);
+
+		status_t 		_SaveConfiguration();
+		status_t 		_LoadConfiguration();
+		void 			_SelectGlobalLocation();
+
+private:
+		BPath			fSettingsPath;
+
+		LocationView* 	fCurrentLocation;
+		BMenuItem* 		fCurrentLocationMenu;
+
+		BTextControl* 	fComputerNameTextControl;
+
+		BMenuField* 	fLocationsMenuField;
+		BPopUpMenu* 	fLocationsMenu;
+		
+		BGroupView* 	fLocationsGroup;
+
+		BCheckBox* 		fShowNetworkInDeskbar;
+		BButton* 		fRevertButton;
+
+		LocationView*	fGlobalLocationView;
+		BMenuItem* 		fGlobalMenuItem;
+
+		NetworkSettings*	fNetworkSettings;
+		BObjectList<LocationView>	fLocationsList;
+};
+
+#endif

Proprietà modificate su: src/preferences/network/NetworkView.h
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/LocationSettings.cpp
===================================================================
--- src/preferences/network/LocationSettings.cpp	(revisione 0)
+++ src/preferences/network/LocationSettings.cpp	(revisione 0)
@@ -0,0 +1,163 @@
+/*
+ * Copyright 2008-2009 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *		Casalinuovo Dario, barrett666@gmail.com
+ */
+
+#include <arpa/inet.h>
+#include <net/if.h>
+#include <net/if_dl.h>
+#include <net/if_media.h>
+#include <net/if_types.h>
+#include <netinet/in.h>
+#include <sys/socket.h>
+#include <sys/sockio.h>
+#include <stdio.h>
+
+#include <AutoDeleter.h>
+#include <Directory.h>
+#include <Entry.h>
+
+#include "LocationSettings.h"
+
+#define PFLT_CONFIGURED "configured"
+
+LocationSettings::LocationSettings(BPath settingsPath)
+	: Settings(settingsPath)
+{
+
+}
+
+
+LocationSettings::~LocationSettings() 
+{
+
+}
+
+
+status_t
+LocationSettings::MoveNetworkFile(BPath currentPath, BPath destinationPath) 
+{
+	BEntry file = BEntry(currentPath.Path());
+	return file.MoveTo(new BDirectory(destinationPath.Path()), NULL, true);
+}
+
+
+status_t
+LocationSettings::LoadSettings()
+{
+	status_t ret;
+
+	ret = ReadSetting(PFLT_CONFIGURED, &fConfigured);
+	if (ret < B_OK)
+		return ret;
+
+	return B_OK;
+}
+
+
+status_t 
+LocationSettings::SaveSettings()
+{
+	status_t ret;
+
+	if (fConfigured == true) {
+		ret = ReplaceSetting(PFLT_CONFIGURED, true);
+		if (ret < B_OK)
+			return ret;
+	} else {
+		ret = WriteSetting(PFLT_CONFIGURED, true);
+		if (ret < B_OK)
+			return ret;
+	}
+	return FlattenSettings();
+}
+
+
+status_t
+LocationSettings::DeleteLocationDirectory(BPath dirPath)
+{
+	BEntry* entry = new BEntry(dirPath.Path(), false);
+
+	status_t ret = entry->Remove();
+	if (ret < B_OK)
+		return ret;
+
+	delete entry;
+	return B_OK;
+}
+
+
+// this is used only by the constructor of the global location view
+void
+LocationSettings::_FindEthernetDevices(BObjectList<BString> *devicesList)
+{
+	int Socket = socket(AF_INET, SOCK_DGRAM, 0);
+	// iterate over all interfaces and retrieve minimal status
+
+	ifconf config;
+	config.ifc_len = sizeof(config.ifc_value);
+	if (ioctl(Socket, SIOCGIFCOUNT, &config, sizeof(struct ifconf)) < 0)
+		return;
+
+	uint32 count = (uint32)config.ifc_value;
+	if (count == 0)
+		return;
+
+	void* buffer = malloc(count * sizeof(struct ifreq));
+	if (buffer == NULL)
+		return;
+
+	MemoryDeleter deleter(buffer);
+
+	config.ifc_len = count * sizeof(struct ifreq);
+	config.ifc_buf = buffer;
+	if (ioctl(Socket, SIOCGIFCONF, &config, sizeof(struct ifconf)) < 0)
+		return;
+
+	ifreq* interface = (ifreq*)buffer;
+
+	fInterfaces.MakeEmpty();
+
+	for (uint32 i = 0; i < count; i++) {
+		if (strncmp(interface->ifr_name, "loop", 4) && interface->ifr_name[0]) {
+			devicesList->AddItem(new BString(interface->ifr_name));
+		}
+
+		interface = (ifreq*)((addr_t)interface + IF_NAMESIZE
+			+ interface->ifr_addr.sa_len);
+	}
+	close(Socket);
+}
+
+
+status_t
+LocationSettings::AddNetwork(const char* name)
+{
+	status_t ret;
+
+}
+
+
+status_t
+LocationSettings::AutoConfigureAllSettings()
+{
+	return B_OK;
+}
+
+
+bool
+LocationSettings::IfConfigured()
+{
+	if (ReadSetting(PFLT_CONFIGURED, &fConfigured) < B_OK)
+		return false;
+
+	if (fConfigured == true) {
+		return true;
+	} else if (fConfigured == false) {
+		return false;
+	}
+	return false;
+}

Proprietà modificate su: src/preferences/network/LocationSettings.cpp
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/NetworkApp.cpp
===================================================================
--- src/preferences/network/NetworkApp.cpp	(revisione 36388)
+++ src/preferences/network/NetworkApp.cpp	(copia locale)
@@ -15,20 +15,22 @@
 NetworkApp::NetworkApp()
 	: BApplication("application/x-vnd.Haiku-Network")
 {
-	be_locale->GetAppCatalog(&fCatalog);
 }
 
+
 NetworkApp::~NetworkApp()
 {
 }
 
+
 void
 NetworkApp::ReadyToRun()
 {
-	fEthWindow = new NetworkWindow();
-	fEthWindow->Show();
+	fPrefletWindow = new NetworkWindow();
+	fPrefletWindow->Show();
 }
 
+
 int
 main(int argc, char** argv)
 {
Index: src/preferences/network/EthernetSettingsView.cpp
===================================================================
--- src/preferences/network/EthernetSettingsView.cpp	(revisione 36388)
+++ src/preferences/network/EthernetSettingsView.cpp	(copia locale)
@@ -1,5 +1,5 @@
 /*
- * Copyright 2004-2009 Haiku Inc. All rights reserved.
+ * Copyright 2004-2010 Haiku Inc. All rights reserved.
  * Distributed under the terms of the MIT License.
  *
  * Authors:
@@ -9,11 +9,10 @@
  *		Hugo Santos
  *		Philippe Saint-Pierre
  *		Vegard Wærp
+ *		Dario Casalinuovo, barrett666@gmail.com
  */
 
-
 #include "EthernetSettingsView.h"
-#include "Settings.h"
 
 #include <Application.h>
 #include <Alert.h>
@@ -35,6 +34,7 @@
 #include <MenuField.h>
 #include <TextControl.h>
 #include <Screen.h>
+#include <StringView.h>
 #include <FindDirectory.h>
 #include <Path.h>
 #include <Volume.h>
@@ -47,39 +47,27 @@
 #include <fs_interface.h>
 #include <Path.h>
 
-#include <arpa/inet.h>
-#include <net/if.h>
-#include <net/if_dl.h>
-#include <net/if_media.h>
-#include <net/if_types.h>
-#include <netinet/in.h>
-#include <sys/socket.h>
-#include <sys/sockio.h>
-
 #include <errno.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
 
-#include <NetServer.h>
+#include "EthernetSettings.h"
 
 #include <support/Beep.h>
 
-#include "AutoDeleter.h"
-
-
 static const uint32 kMsgApply = 'aply';
 static const uint32 kMsgRevert = 'rvrt';
 static const uint32 kMsgClose = 'clse';
 static const uint32 kMsgField = 'fild';
 static const uint32 kMsgInfo = 'info';
 static const uint32 kMsgMode = 'mode';
-static const uint32	kMsgChange = 'chng';
+static const uint32 kMsgChange = 'chng';
 
 
 static void
-SetupTextControl(BTextControl *control)
+SetupTextControl(BTextControl* control)
 {
 	// TODO: Disallow characters, etc.
 	// Would be nice to have a real
@@ -87,20 +75,15 @@
 	control->SetModificationMessage(new BMessage(kMsgChange));
 }
 
-
-//	#pragma mark -
-
 #undef TR_CONTEXT
-#define TR_CONTEXT "EthernetSettingsView"
+#define TR_CONTEXT "NetworkTypeView"
 
-EthernetSettingsView::EthernetSettingsView()
-	: BView("EthernetSettingsView", 0, NULL),
-	fCurrentSettings(NULL)
+EthernetSettingsView::EthernetSettingsView(BPath path, const char* adapterName)
+	: NetworkTypeView("EthernetSettingsView", 0, NULL)
 {
 	SetViewColor(ui_color(B_PANEL_BACKGROUND_COLOR));
 
-	fSocket = socket(AF_INET, SOCK_DGRAM, 0);
-	_GatherInterfaces();
+	fCurrentSettings = new EthernetSettings(path, adapterName);
 
 	// build the GUI
 	BGroupLayout* rootLayout = new BGroupLayout(B_VERTICAL);
@@ -114,33 +97,22 @@
 	rootLayout->SetInsets(inset, inset, inset, inset);
 	rootLayout->SetSpacing(inset);
 	layout->SetSpacing(inset, inset);
-
-	BPopUpMenu* deviceMenu = new BPopUpMenu("devices");
-	for (int32 i = 0; i < fInterfaces.CountItems(); i++) {
-		BString& name = *fInterfaces.ItemAt(i);
-		BString label = name;
-		BMessage* info = new BMessage(kMsgInfo);
-		info->AddString("interface", name.String());
-		BMenuItem* item = new BMenuItem(label.String(), info);
-		deviceMenu->AddItem(item);
-	}
-
+	
+	printf("1\n");
+	
 	BPopUpMenu* modeMenu = new  BPopUpMenu("modes");
-	modeMenu->AddItem(new BMenuItem(TR("Static"), new BMessage(kMsgMode)));
-	modeMenu->AddItem(new BMenuItem(TR("DHCP"), new BMessage(kMsgMode)));
+	modeMenu->AddItem(new BMenuItem("Static", new BMessage(kMsgMode)));
+	modeMenu->AddItem(new BMenuItem("DHCP", new BMessage(kMsgMode)));
 	//modeMenu->AddSeparatorItem();
 	//BMenuItem* offItem = new BMenuItem("Disabled", NULL);
 	//modeMenu->AddItem(offItem);
 
-	fDeviceMenuField = new BMenuField(TR("Adapter:"), deviceMenu);
-	layout->AddItem(fDeviceMenuField->CreateLabelLayoutItem(), 0, 0);
-	layout->AddItem(fDeviceMenuField->CreateMenuBarLayoutItem(), 1, 0);
 
-	fTypeMenuField = new BMenuField(TR("Mode:"), modeMenu);
+	fTypeMenuField = new BMenuField("Mode:", modeMenu);
 	layout->AddItem(fTypeMenuField->CreateLabelLayoutItem(), 0, 1);
 	layout->AddItem(fTypeMenuField->CreateMenuBarLayoutItem(), 1, 1);
 
-	fIPTextControl = new BTextControl(TR("IP address:"), "", NULL);
+	fIPTextControl = new BTextControl("IP Address:", "", NULL);
 	SetupTextControl(fIPTextControl);
 
 	BLayoutItem* layoutItem = fIPTextControl->CreateTextViewLayoutItem();
@@ -151,29 +123,29 @@
 	layout->AddItem(fIPTextControl->CreateLabelLayoutItem(), 0, 2);
 	layout->AddItem(layoutItem, 1, 2);
 
-	fNetMaskTextControl = new BTextControl(TR("Netmask:"), "", NULL);
+	fNetMaskTextControl = new BTextControl("Netmask:", "", NULL);
 	SetupTextControl(fNetMaskTextControl);
 	layout->AddItem(fNetMaskTextControl->CreateLabelLayoutItem(), 0, 3);
 	layout->AddItem(fNetMaskTextControl->CreateTextViewLayoutItem(), 1, 3);
 
-	fGatewayTextControl = new BTextControl(TR("Gateway:"), "", NULL);
+	fGatewayTextControl = new BTextControl("Gateway:", "", NULL);
 	SetupTextControl(fGatewayTextControl);
 	layout->AddItem(fGatewayTextControl->CreateLabelLayoutItem(), 0, 4);
 	layout->AddItem(fGatewayTextControl->CreateTextViewLayoutItem(), 1, 4);
 
 	// TODO: Replace the DNS text controls by a BListView with add/remove
 	// functionality and so on...
-	fPrimaryDNSTextControl = new BTextControl(TR("DNS #1:"), "", NULL);
+	fPrimaryDNSTextControl = new BTextControl("DNS #1:", "", NULL);
 	SetupTextControl(fPrimaryDNSTextControl);
 	layout->AddItem(fPrimaryDNSTextControl->CreateLabelLayoutItem(), 0, 5);
 	layout->AddItem(fPrimaryDNSTextControl->CreateTextViewLayoutItem(), 1, 5);
 
-	fSecondaryDNSTextControl = new BTextControl(TR("DNS #2:"), "", NULL);
+	fSecondaryDNSTextControl = new BTextControl("DNS #2:", "", NULL);
 	SetupTextControl(fSecondaryDNSTextControl);
 	layout->AddItem(fSecondaryDNSTextControl->CreateLabelLayoutItem(), 0, 6);
 	layout->AddItem(fSecondaryDNSTextControl->CreateTextViewLayoutItem(), 1, 6);
 
-	fDomainTextControl = new BTextControl(TR("Domain:"), "", NULL);
+	fDomainTextControl = new BTextControl("Domain:", "", NULL);
 	SetupTextControl(fDomainTextControl);
 	layout->AddItem(fDomainTextControl->CreateLabelLayoutItem(), 0, 7);
 	layout->AddItem(fDomainTextControl->CreateTextViewLayoutItem(), 1, 7);
@@ -188,16 +160,18 @@
 	// button group (TODO: move to window, but take care of
 	// enabling/disabling)
 	BGroupView* buttonGroup = new BGroupView(B_HORIZONTAL);
-
+/*
 	fRevertButton = new BButton(TR("Revert"), new BMessage(kMsgRevert));
 	fRevertButton->SetEnabled(false);
 	buttonGroup->GroupLayout()->AddView(fRevertButton);
 
 	buttonGroup->GroupLayout()->AddItem(BSpaceLayoutItem::CreateGlue());
-
-	fApplyButton = new BButton(TR("Apply"), new BMessage(kMsgApply));
+*/
+	fApplyButton = new BButton("Apply", new BMessage(kMsgApply));
 	buttonGroup->GroupLayout()->AddView(fApplyButton);
 
+	printf("2\n");
+	
 	rootLayout->AddView(controlsGroup);
 	rootLayout->AddView(buttonGroup);
 }
@@ -205,95 +179,45 @@
 
 EthernetSettingsView::~EthernetSettingsView()
 {
-	close(fSocket);
-}
 
-
-bool
-EthernetSettingsView::_PrepareRequest(struct ifreq& request, const char* name)
-{
-	// This function is used for talking direct to the stack.
-	// It's used by _ShowConfiguration.
-
-	if (strlen(name) > IF_NAMESIZE)
-		return false;
-
-	strcpy(request.ifr_name, name);
-	return true;
 }
 
 
 void
-EthernetSettingsView::_GatherInterfaces()
-{
-	// iterate over all interfaces and retrieve minimal status
-
-	ifconf config;
-	config.ifc_len = sizeof(config.ifc_value);
-	if (ioctl(fSocket, SIOCGIFCOUNT, &config, sizeof(struct ifconf)) < 0)
-		return;
-
-	uint32 count = (uint32)config.ifc_value;
-	if (count == 0)
-		return;
-
-	void* buffer = malloc(count * sizeof(struct ifreq));
-	if (buffer == NULL)
-		return;
-
-	MemoryDeleter deleter(buffer);
-
-	config.ifc_len = count * sizeof(struct ifreq);
-	config.ifc_buf = buffer;
-	if (ioctl(fSocket, SIOCGIFCONF, &config, sizeof(struct ifconf)) < 0)
-		return;
-
-	ifreq* interface = (ifreq*)buffer;
-
-	fInterfaces.MakeEmpty();
-
-	for (uint32 i = 0; i < count; i++) {
-		if (strncmp(interface->ifr_name, "loop", 4) && interface->ifr_name[0]) {
-			fInterfaces.AddItem(new BString(interface->ifr_name));
-			fSettings.AddItem(new Settings(interface->ifr_name));
-		}
-
-		interface = (ifreq*)((addr_t)interface + IF_NAMESIZE
-			+ interface->ifr_addr.sa_len);
-	}
-}
-
-
-void
 EthernetSettingsView::AttachedToWindow()
 {
 	fApplyButton->SetTarget(this);
-	fRevertButton->SetTarget(this);
+//	fRevertButton->SetTarget(this);
 	fIPTextControl->SetTarget(this);
 	fNetMaskTextControl->SetTarget(this);
 	fGatewayTextControl->SetTarget(this);
 	fPrimaryDNSTextControl->SetTarget(this);
 	fSecondaryDNSTextControl->SetTarget(this);
 	fDomainTextControl->SetTarget(this);
-	fDeviceMenuField->Menu()->SetTargetForItems(this);
 	fTypeMenuField->Menu()->SetTargetForItems(this);
 
-	// display settigs of first adapter on startup
-	_ShowConfiguration(fSettings.ItemAt(0));
+	// display settigs of adapter on startup
+	_ShowConfiguration();
 }
 
 
 void
 EthernetSettingsView::DetachedFromWindow()
 {
+
 }
 
 
 void
-EthernetSettingsView::_ShowConfiguration(Settings* settings)
+EthernetSettingsView::DeleteNetworkAndSettings()
 {
-	fCurrentSettings = settings;
 
+}
+
+
+void
+EthernetSettingsView::_ShowConfiguration()
+{
 	// Clear the inputs.
 	fIPTextControl->SetText("");
 	fGatewayTextControl->SetText("");
@@ -303,37 +227,34 @@
 	fDomainTextControl->SetText("");
 
 	bool enableControls = false;
-	fTypeMenuField->SetEnabled(settings != NULL);
+	fTypeMenuField->SetEnabled(fCurrentSettings != NULL);
 
-	if (settings) {
-		BMenuItem* item = fDeviceMenuField->Menu()->FindItem(
-			settings->Name());
-		if (item)
-			item->SetMarked(true);
+	if (fCurrentSettings) {
+		BMenuItem* item;
 
-		fIPTextControl->SetText(settings->IP());
-		fGatewayTextControl->SetText(settings->Gateway());
-		fNetMaskTextControl->SetText(settings->Netmask());
+		fIPTextControl->SetText(fCurrentSettings->GetIP());
+		fGatewayTextControl->SetText(fCurrentSettings->GetGateway());
+		fNetMaskTextControl->SetText(fCurrentSettings->GetNetmask());
 
-		if (settings->AutoConfigure() == true)
-			item = fTypeMenuField->Menu()->FindItem(TR("DHCP"));
+		if (fCurrentSettings->GetAutoConfigure() == true)
+			item = fTypeMenuField->Menu()->FindItem("DHCP");
 		else
-			item = fTypeMenuField->Menu()->FindItem(TR("Static"));
+			item = fTypeMenuField->Menu()->FindItem("Static");
 		if (item)
 			item->SetMarked(true);
 
-		enableControls = settings->AutoConfigure() == false;
+		enableControls = fCurrentSettings->GetAutoConfigure() == false;
 
-		if (settings->NameServers().CountItems() >= 2) {
+		if (fCurrentSettings->NameServers().CountItems() >= 2) {
 			fSecondaryDNSTextControl->SetText(
-				settings->NameServers().ItemAt(1)->String());
+				fCurrentSettings->NameServers().ItemAt(1)->String());
 		}
 
-		if (settings->NameServers().CountItems() >= 1) {
+		if (fCurrentSettings->NameServers().CountItems() >= 1) {
 			fPrimaryDNSTextControl->SetText(
-				settings->NameServers().ItemAt(0)->String());
+				fCurrentSettings->NameServers().ItemAt(0)->String());
 		}
-		fDomainTextControl->SetText(settings->Domain());
+		fDomainTextControl->SetText(fCurrentSettings->GetDomain());
 	}
 
 	_EnableTextControls(enableControls);
@@ -363,7 +284,7 @@
 	fCurrentSettings->SetGateway(fGatewayTextControl->Text());
 
 	fCurrentSettings->SetAutoConfigure(
-		strcmp(fTypeMenuField->Menu()->FindMarked()->Label(), TR("DHCP")) == 0);
+		strcmp(fTypeMenuField->Menu()->FindMarked()->Label(), "DHCP") == 0);
 
 	fCurrentSettings->NameServers().MakeEmpty();
 	fCurrentSettings->NameServers().AddItem(new BString(
@@ -373,155 +294,14 @@
 	fCurrentSettings->SetDomain(fDomainTextControl->Text());
 
 	fApplyButton->SetEnabled(false);
-	fRevertButton->SetEnabled(true);
+	
+	if (fCurrentSettings->GetAutoConfigure())
+		fCurrentSettings->TriggerAutoConfig();
+	
+//	fRevertButton->SetEnabled(true);
 }
 
 
-void
-EthernetSettingsView::_SaveConfiguration()
-{
-	_ApplyControlsToConfiguration();
-	_SaveDNSConfiguration();
-	_SaveAdaptersConfiguration();
-	if (fCurrentSettings->AutoConfigure())
-		_TriggerAutoConfig(fCurrentSettings->Name());
-}
-
-
-void
-EthernetSettingsView::_SaveDNSConfiguration()
-{
-	BPath path;
-	if (find_directory(B_COMMON_SETTINGS_DIRECTORY, &path) != B_OK)
-		return;
-
-	path.Append("network/resolv.conf");
-
-	BFile file(path.Path(), B_CREATE_FILE | B_ERASE_FILE | B_WRITE_ONLY);
-	if (file.InitCheck() != B_OK) {
-		fprintf(stderr, "failed to open %s for writing: %s\n", path.Path(), 
-			strerror(file.InitCheck()));
-		return;
-	}
-
-	BString content("# Generated by Network Preflet\n");
-	// loop over all adapters
-	for (int i = 0; i < fSettings.CountItems(); i++) {
-		Settings* settings = fSettings.ItemAt(i);
-		for (int j = 0; j < settings->NameServers().CountItems(); j++) {
-			if (settings->NameServers().ItemAt(j)->Length() > 0) {
-				content << "nameserver\t"
-					<< settings->NameServers().ItemAt(j)->String()
-					<< "\n";
-			}
-		}
-		if (strlen(settings->Domain()) > 0) {
-			content << "domain\t"
-				<< settings->Domain()
-				<< "\n";
-		}
-	}
-
-	file.Write(content.String(), content.Length());
-}
-
-
-void
-EthernetSettingsView::_SaveAdaptersConfiguration()
-{
-	BPath path;
-	status_t status = _GetPath("interfaces", path);
-	if (status < B_OK)
-		return;
-
-	FILE* fp = NULL;
-	// loop over all adapters. open the settings file only once,
-	// append the settins of each non-autoconfiguring adapter
-	for (int i = 0; i < fSettings.CountItems(); i++) {
-		if (fSettings.ItemAt(i)->AutoConfigure())
-			continue;
-
-		if (fp == NULL) {
-			fp = fopen(path.Path(), "w");
-			if (fp == NULL) {
-				fprintf(stderr, "failed to open file %s to write "
-					"configuration: %s\n", path.Path(), strerror(errno));
-				return;
-			}
-		}
-
-		fprintf(fp, "interface %s {\n\t\taddress {\n",
-			fSettings.ItemAt(i)->Name());
-		fprintf(fp, "\t\t\tfamily\tinet\n");
-		fprintf(fp, "\t\t\taddress\t%s\n",
-			fSettings.ItemAt(i)->IP());
-		fprintf(fp, "\t\t\tgateway\t%s\n",
-			fSettings.ItemAt(i)->Gateway());
-		fprintf(fp, "\t\t\tmask\t%s\n",
-			fSettings.ItemAt(i)->Netmask());
-		fprintf(fp, "\t\t}\n}\n\n");
-	}
-	if (fp) {
-		printf("%s saved.\n", path.Path());
-		fclose(fp);
-	} else {
-		// all configuration is DHCP, so delete interfaces file.
-		remove(path.Path());
-	}
-}
-
-
-status_t
-EthernetSettingsView::_TriggerAutoConfig(const char* device)
-{
-	BMessenger networkServer(kNetServerSignature);
-	if (!networkServer.IsValid()) {
-		(new BAlert("error", TR("The net_server needs to run for the auto "
-			"configuration!"), TR("OK")))->Go();
-		return B_ERROR;
-	}
-
-	BMessage message(kMsgConfigureInterface);
-	message.AddString("device", device);
-	BMessage address;
-	address.AddString("family", "inet");
-	address.AddBool("auto_config", true);
-	message.AddMessage("address", &address);
-
-	BMessage reply;
-	status_t status = networkServer.SendMessage(&message, &reply);
-	if (status != B_OK) {
-		BString errorMessage(TR("Sending auto-config message failed: "));
-		errorMessage << strerror(status);
-		(new BAlert("error", errorMessage.String(), TR("OK")))->Go();
-		return status;
-	} else if (reply.FindInt32("status", &status) == B_OK
-			&& status != B_OK) {
-		BString errorMessage(TR("Auto-configuring failed: "));
-		errorMessage << strerror(status);
-		(new BAlert("error", errorMessage.String(), "OK"))->Go();
-		return status;
-	}
-
-	return B_OK;
-}
-
-
-status_t
-EthernetSettingsView::_GetPath(const char* name, BPath& path)
-{
-	if (find_directory(B_COMMON_SETTINGS_DIRECTORY, &path, true) != B_OK)
-		return B_ERROR;
-
-	path.Append("network");
-	create_directory(path.Path(), 0755);
-
-	if (name != NULL)
-		path.Append(name);
-	return B_OK;
-}
-
-
 bool
 MatchPattern(const char* string, const char* pattern)
 {
@@ -555,32 +335,51 @@
 
 
 void
+EthernetSettingsView::_SaveConfiguration()
+{
+	fCurrentSettings->SaveSettings();
+	_ApplyControlsToConfiguration();
+	if (fCurrentSettings->GetAutoConfigure())
+		fCurrentSettings->TriggerAutoConfig();
+}
+
+
+void
+EthernetSettingsView::RevertAll()
+{
+	_ShowConfiguration();
+}
+
+
+void
 EthernetSettingsView::MessageReceived(BMessage* message)
 {
 	switch (message->what) {
+
 		case kMsgMode:
 			if (BMenuItem* item = fTypeMenuField->Menu()->FindMarked())
-				_EnableTextControls(strcmp(item->Label(), TR("DHCP")) != 0);
+				_EnableTextControls(strcmp(item->Label(), "DHCP") != 0);
 			fApplyButton->SetEnabled(true);
-			fRevertButton->SetEnabled(true);
+//			fRevertButton->SetEnabled(true);
 			break;
-		case kMsgInfo: {
-		 	const char* name;
+
+		case kMsgInfo: 
+		{
+			const char* name;
 			if (message->FindString("interface", &name) != B_OK)
 				break;
-			for (int32 i = 0; i < fSettings.CountItems(); i++) {
-				Settings* settings = fSettings.ItemAt(i);
-				if (strcmp(settings->Name(), name) == 0) {
-					_ShowConfiguration(settings);
+				if (strcmp(fCurrentSettings->GetName(), name) == 0) {
+					_ShowConfiguration();
 					break;
 				}
-			}
 			break;
 		}
+
 		case kMsgRevert:
-			_ShowConfiguration(fCurrentSettings);
-			fRevertButton->SetEnabled(false);
+			_ShowConfiguration();
+//			fRevertButton->SetEnabled(false);
 			break;
+
 		case kMsgApply:
 			if (_ValidateControl(fIPTextControl)
 				&& _ValidateControl(fNetMaskTextControl)
@@ -590,12 +389,14 @@
 					|| _ValidateControl(fPrimaryDNSTextControl))
 				&& (strlen(fSecondaryDNSTextControl->Text()) == 0
 					|| _ValidateControl(fSecondaryDNSTextControl)))
-				_SaveConfiguration();
+			_SaveConfiguration();
 			break;
+
 		case kMsgChange:
 			fErrorMessage->SetText("");
 			fApplyButton->SetEnabled(true);
 			break;
+
 		default:
 			BView::MessageReceived(message);
 	}
Index: src/preferences/network/NetworkTypeView.h
===================================================================
--- src/preferences/network/NetworkTypeView.h	(revisione 0)
+++ src/preferences/network/NetworkTypeView.h	(revisione 0)
@@ -0,0 +1,43 @@
+/*
+ * Copyright 2009 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *      Dario Casalinuovo, barrett666@gmail.com
+ */
+
+#ifndef NETWORK_TYPE_H
+#define NETWORK_TYPE_H
+
+#include <Path.h>
+#include <String.h>
+#include <View.h>
+
+class NetworkTypeView : public BView {
+public:
+						NetworkTypeView(const char* name, uint32 flags, BLayout* layout);
+		virtual			~NetworkTypeView();
+
+		virtual	void	MessageReceived(BMessage* message);
+		virtual	void	AttachedToWindow();
+		virtual	void	DetachedFromWindow();
+
+		virtual void	DeleteNetworkAndSettings();
+		virtual void	ChangeSettingsFilePath(BPath path);
+		
+		virtual void	RevertAll();
+		virtual void	ApplyChanges();
+		
+				bool	IfHwDevice() { return fIfDevice; }
+				void	SetHwDevice(bool ifDevice);
+		
+		const char*		Name() { return fName.String(); }
+
+private:
+  		BString 		fName;
+  		bool			fIfDevice;
+
+};
+
+#endif 
+

Proprietà modificate su: src/preferences/network/NetworkTypeView.h
___________________________________________________________________
Added: svn:executable
   + *

Index: src/preferences/network/NetworksMenuView.cpp
===================================================================
--- src/preferences/network/NetworksMenuView.cpp	(revisione 0)
+++ src/preferences/network/NetworksMenuView.cpp	(revisione 0)
@@ -0,0 +1,363 @@
+/*
+ * Copyright 2008 - 2009 Haiku Inc. All rights reserved.
+ * Distributed under the terms of the MIT License.
+ *
+ * Author:
+ *		Casalinuovo Dario, barrett666@gmail.com
+ */
+
+#include <stdio.h>
+
+#include <Alert.h>
+#include <Box.h>
+#include <CheckBox.h>
+#include <ColumnTypes.h>
+#include <ColumnListView.h>
+#include <GridView.h>
+#include <GroupView.h>
+#include <LayoutItem.h>
+#include <StringView.h>
+
+#include "EthernetSettingsView.h"
+#include "NetworksMenuView.h"
+#include "PPPoEView.h"
+
+const uint32 kMsgCustomizePreferences = 'cprf';
+const uint32 kMsgSelectedNetwork = 'slnw';
+
+NetworksMenuView::NetworksMenuView()
+	: BView("EthernetNetworkView", 0, NULL)
+{
+	SetViewColor(ui_color(B_PANEL_BACKGROUND_COLOR));
+
+	BGroupLayout* rootLayout = new BGroupLayout(B_VERTICAL);
+	
+	SetLayout(rootLayout);
+
+	BGroupView* bboxGroup = new BGroupView(B_HORIZONTAL);
+
+	fNetworksBBox = new BBox("Networks");
+	fNetworksBBox->SetLabel("Networks");
+
+	fNetworksList = new BColumnListView(BRect(5, 15, 164, 175), "Networks List",
+		B_FOLLOW_LEFT, B_WILL_DRAW, B_PLAIN_BORDER, false);
+
+	fNetworksList->AddColumn(new BStringColumn("Name", 100, 50, 500, 
+		B_TRUNCATE_MIDDLE), 0);
+
+	fNetworksList->AddColumn(new BStringColumn("State", 200, 50, 500, 
+		B_TRUNCATE_MIDDLE), 0);
+
+	fNetworksList->SetSelectionMessage(new BMessage(kMsgSelectedNetwork));
+
+	fNetworksBBox->AddChild(fNetworksList);
+
+	bboxGroup->GroupLayout()->AddView(fNetworksBBox);
+
+	fNtpGroup = new BGroupView(B_VERTICAL);
+
+	fNetworkPreferencesBBox = new BBox("Network Preferences");
+	fNetworkPreferencesBBox->SetLabel("Network Preferences"); 
+/*
+	fCustomizePreferencesCheckBox = new BCheckBox(
+		"Customize Preferences for this location", 
+		new BMessage(kMsgCustomizePreferences));
+
+	fNetworkPreferencesBBox->AddChild(fCustomizePreferencesCheckBox);
+
+	fNetworkName = new BStringView("NetworkName","Name :");
+	fNetworkStatus = new BStringView("NetworkStatus","Status :"); 
+
+	fNetworkPreferencesBBox->AddChild(fNetworkName);
+	fNetworkPreferencesBBox->AddChild(fNetworkStatus);
+*/
+	fNetworkPreferencesBBox->AddChild(fNtpGroup);
+
+	bboxGroup->GroupLayout()->AddView(fNetworkPreferencesBBox);
+
+	rootLayout->AddView(bboxGroup);
+}
+
+
+NetworksMenuView::~NetworksMenuView()
+{
+
+}
+
+
+status_t
+NetworksMenuView::AddEthernetAdapter(BString adapterName, BPath fBasePath)
+{
+	_HideAllChilds();
+	NRow* row = new NRow(20);
+
+	BString name = BString(adapterName);
+	name.Remove(0, 9);
+	fBasePath.Append("/");
+	fBasePath.Append(name.String());
+
+	EthernetSettingsView* ethernetView = new EthernetSettingsView(
+		fBasePath, adapterName.String());
+
+	ethernetView->SetHwDevice(true);
+
+	fNtpGroup->AddChild(ethernetView);
+	row->SetAssociatedView(ethernetView);
+
+	BStringField* strFeld = new BStringField(name.String());
+	row->SetField(strFeld, 0);
+	fNetworksList->AddRow(row, 1);
+
+	return B_OK;
+}
+
+
+status_t
+NetworksMenuView::AddPPPoENetwork(BString adapterName, BPath fBasePath)
+{
+	_HideAllChilds();
+	NRow* row = new NRow(20);
+
+	fBasePath.Append(adapterName.String());
+
+	PPPoEView* pppoeView = new PPPoEView(fBasePath, adapterName);
+	fNtpGroup->AddChild(pppoeView);
+
+	row->SetAssociatedView(pppoeView);
+
+	BStringField* strFeld = new BStringField(adapterName.String());
+	row->SetField(strFeld, 0);
+	fNetworksList->AddRow(row, 1);
+
+	return B_OK;
+}
+
+
+status_t
+NetworksMenuView::MoveNetwork(NetworkTypeView* network)
+{
+	printf("NetworksMenuView::MoveNetwork\n");
+	if (network == NULL)
+		return B_ERROR;
+
+	_HideAllChilds();
+	NRow* row = new NRow(20);
+
+	fNtpGroup->AddChild(network);
+	row->SetAssociatedView(network);
+
+	BStringField* strFeld = new BStringField(network->Name());
+	row->SetField(strFeld, 0);
+	fNetworksList->AddRow(row, 1);
+
+	return B_OK;
+}
+
+
+void
+NetworksMenuView::RevertAll()
+{
+	int i, count;	
+	if (!fNetworksList)
+		return;
+
+	count = fNetworksList->CountRows();
+	for (i = 0; i < count; i++) {
+		NRow* row = dynamic_cast<NRow*>(fNetworksList->RowAt(i));
+		NetworkTypeView* view = row->GetAssociatedView();
+		view->RevertAll();
+	}
+	return;
+}
+
+
+status_t
+NetworksMenuView::DeleteAllNetworks()
+{
+	int i, count;	
+	if (!fNetworksList)
+		return B_OK;
+
+	count = fNetworksList->CountRows();
+	for (i = 0; i < count; i++) {
+		NRow* row = dynamic_cast<NRow*>(fNetworksList->RowAt(i));
+		NetworkTypeView* view = row->GetAssociatedView();
+		view->DeleteNetworkAndSettings();
+	}
+
+	return B_OK;
+}
+
+
+status_t
+NetworksMenuView::RemoveNetwork()
+{
+	NRow* selectedRow = dynamic_cast<NRow*>(
+		fNetworksList->CurrentSelection());
+	if (selectedRow == NULL)
+		return B_ERROR;
+	
+	NetworkTypeView* associatedView = selectedRow->GetAssociatedView();
+	if (associatedView == NULL) 
+		return B_ERROR;
+
+	if (associatedView->IfHwDevice()) {
+		BAlert* alert = new BAlert("Warning!",
+			"The Hardware devices cannot be deleted!\n",
+			"OK", NULL, NULL, B_WIDTH_AS_USUAL, B_STOP_ALERT);
+		alert->Go();
+		delete alert;
+		return B_OK;	
+	}
+
+	fNtpGroup->RemoveChild(associatedView);
+
+	fNetworksList->RemoveRow(selectedRow);
+
+	BView* currentView = fNtpGroup->ChildAt(0);
+
+	if (currentView != NULL) {
+		fNtpGroup->AddChild(currentView);
+	} else {
+		return B_ERROR;
+	}
+
+	associatedView->DeleteNetworkAndSettings();
+	delete associatedView;
+
+	return B_OK;
+}
+
+
+status_t
+NetworksMenuView::SelectedNetworkMoved()
+{
+	NRow* selectedRow = dynamic_cast<NRow*>(
+		fNetworksList->CurrentSelection());
+	if (selectedRow == NULL)
+		return B_ERROR;
+
+	NetworkTypeView* associatedView = selectedRow->GetAssociatedView();
+
+	if (associatedView == NULL) 
+		return B_ERROR;
+
+	fNtpGroup->RemoveChild(associatedView);
+
+	fNetworksList->RemoveRow(selectedRow);
+
+	BView* currentView = fNtpGroup->ChildAt(0);
+
+	if (currentView != NULL) {
+		fNtpGroup->AddChild(currentView);
+	} else {
+		return B_ERROR;
+	}
+
+	return B_OK;
+}
+
+
+NetworkTypeView*
+NetworksMenuView::GetSelectedNetwork()
+{
+	NRow* selectedRow = dynamic_cast<NRow*>(
+		fNetworksList->CurrentSelection());
+	if (selectedRow == NULL)
+		return NULL;
+
+	return selectedRow->GetAssociatedView();
+}
+
+
+void
+NetworksMenuView::AttachedToWindow()
+{
+	fNetworksList->SetTarget(this);
+	//fCustomizePreferencesCheckBox->SetTarget(this);
+}
+
+
+void
+NetworksMenuView::DetachedFromWindow()
+{
+
+}
+
+
+void
+NetworksMenuView::MessageReceived(BMessage* message)
+{
+	switch (message->what) {
+
+		case kMsgSelectedNetwork:
+		{		
+			BRow* selected = fNetworksList->CurrentSelection();
+			if (selected == NULL)
+				break;
+
+			NRow* selectedRow = (NRow*)selected;
+			BView* associatedView = selectedRow->GetAssociatedView();
+			_HideAllChilds();
+			if (associatedView == NULL)
+				break;
+
+			fNtpGroup->AddChild(associatedView);
+			break;
+		}
+
+	}
+}
+
+
+void
+NetworksMenuView::_HideAllChilds()
+{
+	int32 childrens = fNtpGroup->CountChildren();
+	int i;
+
+	for (i = 0; i < childrens; i++) {	
+		BView* currview = fNtpGroup->ChildAt(i);
+
+		if (currview != NULL) {
+			fNtpGroup->RemoveChild(currview);
+		} else {
+			break;
+		}
+	}
+}
+
+
+NRow::NRow(float height) 
+	: BRow(height)
+{
+
+}
+
+
+void
+NRow::SetAssociatedView(NetworkTypeView* view)
+{
+	fAssociatedView = view;
+}
+
+
+NetworkTypeView*
+NRow::GetAssociatedView()
+{
+	return fAssociatedView;
+}
+
+
+void
+NRow::SetType(const char* type)
+{
+	fType = type;
+}
+
+
+const char*
+NRow::GetType()
+{
+	return fType;
+}

Proprietà modificate su: src/preferences/network/NetworksMenuView.cpp
___________________________________________________________________
Added: svn:executable
   + *

